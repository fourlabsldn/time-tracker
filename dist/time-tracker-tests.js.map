{"version":3,"file":"time-tracker-tests.js","sources":["node_modules/ramda/src/internal/_isPlaceholder.js","node_modules/ramda/src/internal/_curry1.js","node_modules/ramda/src/internal/_arity.js","node_modules/ramda/src/internal/_curry2.js","node_modules/ramda/src/internal/_curryN.js","node_modules/ramda/src/curryN.js","node_modules/ramda/src/curry.js","src/js/types/Maybe.js","src/js/types/RemoteData.js","node_modules/fl-assert/dist/assert.js","src/js/types/Validation.js","node_modules/ramda/src/isNil.js","node_modules/ramda/src/internal/_pipe.js","node_modules/ramda/src/internal/_curry3.js","node_modules/ramda/src/internal/_xwrap.js","node_modules/ramda/src/bind.js","node_modules/ramda/src/internal/_isArray.js","node_modules/ramda/src/internal/_isString.js","node_modules/ramda/src/isArrayLike.js","node_modules/ramda/src/internal/_reduce.js","node_modules/ramda/src/reduce.js","node_modules/ramda/src/internal/_slice.js","node_modules/ramda/src/internal/_checkForMethod.js","node_modules/ramda/src/slice.js","node_modules/ramda/src/tail.js","node_modules/ramda/src/pipe.js","src/js/types/type-checkers.js","node_modules/ramda/src/internal/_has.js","node_modules/ramda/src/propOr.js","node_modules/seamless-immutable/src/seamless-immutable.js","src/js/types/utils.js","src/js/types/TimeInterval.js","src/js/types/Recording/toggleRecording.js","node_modules/ramda/src/add.js","src/js/types/Recording/totalTime.js","src/js/types/Recording/index.js","src/js/types/Deliverable.js","node_modules/ramda/src/internal/_arrayFromIterator.js","node_modules/ramda/src/internal/_functionName.js","node_modules/ramda/src/identical.js","node_modules/ramda/src/internal/_isArguments.js","node_modules/ramda/src/keys.js","node_modules/ramda/src/type.js","node_modules/ramda/src/internal/_equals.js","node_modules/ramda/src/equals.js","node_modules/ramda/src/propEq.js","node_modules/ramda/src/not.js","node_modules/ramda/src/internal/_isTransformer.js","node_modules/ramda/src/internal/_dispatchable.js","node_modules/ramda/src/internal/_filter.js","node_modules/ramda/src/internal/_isObject.js","node_modules/ramda/src/internal/_xfBase.js","node_modules/ramda/src/internal/_xfilter.js","node_modules/ramda/src/filter.js","src/js/types/Project.js","src/js/types/index.js","src/tests/types/Validation.js","src/tests/types/Deliverable.js","src/tests/types/Recording.js","src/tests/types/Maybe.js","src/tests/types/TimeInterval.js","src/tests/types/Project.js","node_modules/ramda/src/prop.js","node_modules/ramda/src/internal/_reduced.js","node_modules/ramda/src/internal/_xfind.js","node_modules/ramda/src/find.js","node_modules/ramda/src/nth.js","node_modules/ramda/src/head.js","node_modules/ramda/src/internal/_isFunction.js","node_modules/ramda/src/internal/_indexOf.js","node_modules/ramda/src/internal/_contains.js","node_modules/ramda/src/internal/_map.js","node_modules/ramda/src/internal/_quote.js","node_modules/ramda/src/internal/_toISOString.js","node_modules/ramda/src/internal/_complement.js","node_modules/ramda/src/reject.js","node_modules/ramda/src/internal/_toString.js","node_modules/ramda/src/toString.js","node_modules/ramda/src/concat.js","node_modules/ramda/src/internal/_xmap.js","node_modules/ramda/src/map.js","node_modules/ramda/src/lt.js","node_modules/ramda/src/defaultTo.js","node_modules/ramda/src/path.js","node_modules/ramda/src/pathOr.js","src/js/Widget/update/utils.js","src/js/Widget/update/toggleRecording.js","src/tests/Widget/mockData.js","src/tests/Widget/update.toggleRecording.js","src/js/Widget/update/selectProject.js","src/tests/Widget/update.selectProject.js","src/js/Widget/update/selectDeliverable.js","src/tests/Widget/update.selectDeliverable.js"],"sourcesContent":["module.exports = function _isPlaceholder(a) {\n  return a != null &&\n         typeof a === 'object' &&\n         a['@@functional/placeholder'] === true;\n};\n","var _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal one-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry1(fn) {\n  return function f1(a) {\n    if (arguments.length === 0 || _isPlaceholder(a)) {\n      return f1;\n    } else {\n      return fn.apply(this, arguments);\n    }\n  };\n};\n","module.exports = function _arity(n, fn) {\n  /* eslint-disable no-unused-vars */\n  switch (n) {\n    case 0: return function() { return fn.apply(this, arguments); };\n    case 1: return function(a0) { return fn.apply(this, arguments); };\n    case 2: return function(a0, a1) { return fn.apply(this, arguments); };\n    case 3: return function(a0, a1, a2) { return fn.apply(this, arguments); };\n    case 4: return function(a0, a1, a2, a3) { return fn.apply(this, arguments); };\n    case 5: return function(a0, a1, a2, a3, a4) { return fn.apply(this, arguments); };\n    case 6: return function(a0, a1, a2, a3, a4, a5) { return fn.apply(this, arguments); };\n    case 7: return function(a0, a1, a2, a3, a4, a5, a6) { return fn.apply(this, arguments); };\n    case 8: return function(a0, a1, a2, a3, a4, a5, a6, a7) { return fn.apply(this, arguments); };\n    case 9: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8) { return fn.apply(this, arguments); };\n    case 10: return function(a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) { return fn.apply(this, arguments); };\n    default: throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n  }\n};\n","var _curry1 = require('./_curry1');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal two-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry2(fn) {\n  return function f2(a, b) {\n    switch (arguments.length) {\n      case 0:\n        return f2;\n      case 1:\n        return _isPlaceholder(a) ? f2\n             : _curry1(function(_b) { return fn(a, _b); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f2\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b); })\n             : fn(a, b);\n    }\n  };\n};\n","var _arity = require('./_arity');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Internal curryN function.\n *\n * @private\n * @category Function\n * @param {Number} length The arity of the curried function.\n * @param {Array} received An array of arguments received thus far.\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curryN(length, received, fn) {\n  return function() {\n    var combined = [];\n    var argsIdx = 0;\n    var left = length;\n    var combinedIdx = 0;\n    while (combinedIdx < received.length || argsIdx < arguments.length) {\n      var result;\n      if (combinedIdx < received.length &&\n          (!_isPlaceholder(received[combinedIdx]) ||\n           argsIdx >= arguments.length)) {\n        result = received[combinedIdx];\n      } else {\n        result = arguments[argsIdx];\n        argsIdx += 1;\n      }\n      combined[combinedIdx] = result;\n      if (!_isPlaceholder(result)) {\n        left -= 1;\n      }\n      combinedIdx += 1;\n    }\n    return left <= 0 ? fn.apply(this, combined)\n                     : _arity(left, _curryN(length, combined, fn));\n  };\n};\n","var _arity = require('./internal/_arity');\nvar _curry1 = require('./internal/_curry1');\nvar _curry2 = require('./internal/_curry2');\nvar _curryN = require('./internal/_curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function, with the specified\n * arity. The curried function has two unusual capabilities. First, its\n * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Function\n * @sig Number -> (* -> a) -> (* -> a)\n * @param {Number} length The arity for the returned function.\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curry\n * @example\n *\n *      var sumArgs = (...args) => R.sum(args);\n *\n *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry2(function curryN(length, fn) {\n  if (length === 1) {\n    return _curry1(fn);\n  }\n  return _arity(length, _curryN(length, [], fn));\n});\n","var _curry1 = require('./internal/_curry1');\nvar curryN = require('./curryN');\n\n\n/**\n * Returns a curried equivalent of the provided function. The curried function\n * has two unusual capabilities. First, its arguments needn't be provided one\n * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n * following are equivalent:\n *\n *   - `g(1)(2)(3)`\n *   - `g(1)(2, 3)`\n *   - `g(1, 2)(3)`\n *   - `g(1, 2, 3)`\n *\n * Secondly, the special placeholder value `R.__` may be used to specify\n * \"gaps\", allowing partial application of any combination of arguments,\n * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n * following are equivalent:\n *\n *   - `g(1, 2, 3)`\n *   - `g(_, 2, 3)(1)`\n *   - `g(_, _, 3)(1)(2)`\n *   - `g(_, _, 3)(1, 2)`\n *   - `g(_, 2)(1)(3)`\n *   - `g(_, 2)(1, 3)`\n *   - `g(_, 2)(_, 3)(1)`\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (* -> a) -> (* -> a)\n * @param {Function} fn The function to curry.\n * @return {Function} A new, curried function.\n * @see R.curryN\n * @example\n *\n *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n *\n *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n *      var f = curriedAddFourNumbers(1, 2);\n *      var g = f(3);\n *      g(4); //=> 10\n */\nmodule.exports = _curry1(function curry(fn) {\n  return curryN(fn.length, fn);\n});\n","/* eslint-disable new-cap */\nimport { curry, pipe } from 'ramda';\n\n/**\n  type Validation\n    = Success a\n    | Failure b\n */\n\nconst types = {\n  Just: Math.random(),\n  Nothing: Math.random(),\n};\n\n\nfunction Maybe(value, type) {\n  // Check that a valid type is being used\n  const isJust = value !== null && value !== undefined && type === types.Just;\n  this.isJust = isJust;\n  this.isNothing = !isJust;\n  this.withDefault = defaultVal => (isJust ? value : defaultVal);\n  this.map = f => (isJust\n    ? Maybe.of(f(value))\n    : Maybe.Nothing()\n  );\n  this.chain = f => this.map(f).withDefault(Maybe.Nothing());\n}\n\n// Static functions\nMaybe.Just = v => new Maybe(v, types.Just);\nMaybe.Nothing = _ => new Maybe(null, types.Nothing);\nMaybe.of = Maybe.Just; // the function itself will take care of nulls and undefineds\n\nMaybe.isJust = v => v.isJust;\nMaybe.isNothing = v => v.isNothing;\nMaybe.withDefault = curry((defaultVal, v) => v.withDefault(defaultVal));\nMaybe.map = curry((f, v) => v.map(f));\nMaybe.map2 = curry((f, v1, v2) => (\n  Maybe.isJust(v1) && Maybe.isJust(v2)\n  ? Maybe.of(f(\n      Maybe.withDefault(null, v1),\n      Maybe.withDefault(null, v2)\n    ))\n  : Maybe.Nothing()\n));\nMaybe.chain = curry((v, f) => v.chain(f));\n\nexport default Maybe;\n","/**\n\n  This type takes care of data that is fetched from the server.\n  type RemoteData\n    = NotAsked null\n    | Loading Request\n    | Failure Response\n    | Success Response\n\n */\nimport { curry } from 'ramda';\nimport Maybe from './Maybe';\n\nconst types = {\n  NotAsked: Math.random(),\n  Loading: Math.random(),\n  Failure: Math.random(),\n  Success: Math.random(),\n};\n\nconst mapIf = curry((condition, value, f) => (condition ? f(value) : value));\n\n// =========================================\n// INSTANCE FUNCTIONS\n// =========================================\nfunction RemoteData(value, type) {\n  const isSuccess = type === types.Success;\n  const isFailure = type === types.Failure;\n  const isLoading = type === types.Loading;\n  if (isFailure) {\n    console.log('Failing with reason:', value);\n  }\n\n  this.isSuccess = isSuccess;\n  this.isFailure = isFailure;\n  this.isLoading = isLoading;\n  this.isNotAsked = type === types.NotAsked;\n  this.withDefault = elseVal => (isSuccess ? value : elseVal);\n  this.map = f => new RemoteData(mapIf(isSuccess, value, f), type);\n  this.mapSuccess = f => new RemoteData(mapIf(isSuccess, value, f), type);\n  this.mapLoading = f => new RemoteData(mapIf(isLoading, value, f), type);\n  this.mapFailure = f => new RemoteData(mapIf(isFailure, value, f), type);\n  this.toMaybe = _ => (isSuccess ? Maybe.Just(value) : Maybe.Nothing()); // eslint-disable-line max-len, new-cap\n  this._value = value; // JUST FOR DEBUGGING PURPOSES. DO NOT USE\n}\n\n\n// =========================================\n// STATIC FUNCTIONS\n// =========================================\nRemoteData.NotAsked = _ => new RemoteData(null, types.NotAsked);\nRemoteData.Loading = v => new RemoteData(v, types.Loading);\nRemoteData.Failure = v => new RemoteData(v, types.Failure);\nRemoteData.Success = v => new RemoteData(v, types.Success);\n\nRemoteData.isNotAsked = v => v.isNotAsked;\nRemoteData.isLoading = v => v.isLoading;\nRemoteData.isFailure = v => v.isFailure;\nRemoteData.isSuccess = v => v.isSuccess;\nRemoteData.withDefault = curry((elseVal, v) => v.withDefault(elseVal));\nRemoteData.map = curry((f, v) => v.map(f));\nRemoteData.mapSuccess = curry((f, v) => v.mapSuccess(f));\nRemoteData.mapLoading = curry((f, v) => v.mapLoading(f));\nRemoteData.mapFailure = curry((f, v) => v.mapFailure(f));\nRemoteData.toMaybe = v => v.toMaybe();\n\nexport default RemoteData;\n","// Bug checking function that will throw an error whenever\n// the condition sent to it is evaluated to false\n/**\n * Processes the message and outputs the correct message if the condition\n * is false. Otherwise it outputs null.\n * @api private\n * @method processCondition\n * @param  {Boolean} condition - Result of the evaluated condition\n * @param  {String} errorMessage - Message explainig the error in case it is thrown\n * @return {String | null}  - Error message if there is an error, nul otherwise.\n */\nfunction processCondition(condition, errorMessage) {\n  if (!condition) {\n    var completeErrorMessage = '';\n    var re = /at ([^\\s]+)\\s\\(/g;\n    var stackTrace = new Error().stack;\n    var stackFunctions = [];\n\n    var funcName = re.exec(stackTrace);\n    while (funcName && funcName[1]) {\n      stackFunctions.push(funcName[1]);\n      funcName = re.exec(stackTrace);\n    }\n\n    // Number 0 is processCondition itself,\n    // Number 1 is assert,\n    // Number 2 is the caller function.\n    if (stackFunctions[2]) {\n      completeErrorMessage = stackFunctions[2] + ': ' + completeErrorMessage;\n    }\n\n    completeErrorMessage += errorMessage;\n    return completeErrorMessage;\n  }\n\n  return null;\n}\n\n/**\n * Throws an error if the boolean passed to it evaluates to false.\n * To be used like this:\n * \t\tassert(myDate !== undefined, \"Date cannot be undefined.\");\n * @api public\n * @method assert\n * @param  {Boolean} condition - Result of the evaluated condition\n * @param  {String} errorMessage - Message explainig the error in case it is thrown\n * @return void\n */\nfunction assert(condition, errorMessage) {\n  var error = processCondition(condition, errorMessage);\n  if (typeof error === 'string') {\n    throw new Error(error);\n  }\n}\n\n/**\n * Logs a warning if the boolean passed to it evaluates to false.\n * To be used like this:\n * \t\tassert.warn(myDate !== undefined, \"No date provided.\");\n * @api public\n * @method warn\n * @param  {Boolean} condition - Result of the evaluated condition\n * @param  {String} errorMessage - Message explainig the error in case it is thrown\n * @return void\n */\nassert.warn = function warn(condition, errorMessage) {\n  var error = processCondition(condition, errorMessage);\n  if (typeof error === 'string') {\n    console.warn(error);\n  }\n};\n\nexport default assert;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIiwic291cmNlcyI6WyJhc3NlcnQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQnVnIGNoZWNraW5nIGZ1bmN0aW9uIHRoYXQgd2lsbCB0aHJvdyBhbiBlcnJvciB3aGVuZXZlclxuLy8gdGhlIGNvbmRpdGlvbiBzZW50IHRvIGl0IGlzIGV2YWx1YXRlZCB0byBmYWxzZVxuLyoqXG4gKiBQcm9jZXNzZXMgdGhlIG1lc3NhZ2UgYW5kIG91dHB1dHMgdGhlIGNvcnJlY3QgbWVzc2FnZSBpZiB0aGUgY29uZGl0aW9uXG4gKiBpcyBmYWxzZS4gT3RoZXJ3aXNlIGl0IG91dHB1dHMgbnVsbC5cbiAqIEBhcGkgcHJpdmF0ZVxuICogQG1ldGhvZCBwcm9jZXNzQ29uZGl0aW9uXG4gKiBAcGFyYW0gIHtCb29sZWFufSBjb25kaXRpb24gLSBSZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBjb25kaXRpb25cbiAqIEBwYXJhbSAge1N0cmluZ30gZXJyb3JNZXNzYWdlIC0gTWVzc2FnZSBleHBsYWluaWcgdGhlIGVycm9yIGluIGNhc2UgaXQgaXMgdGhyb3duXG4gKiBAcmV0dXJuIHtTdHJpbmcgfCBudWxsfSAgLSBFcnJvciBtZXNzYWdlIGlmIHRoZXJlIGlzIGFuIGVycm9yLCBudWwgb3RoZXJ3aXNlLlxuICovXG5mdW5jdGlvbiBwcm9jZXNzQ29uZGl0aW9uKGNvbmRpdGlvbiwgZXJyb3JNZXNzYWdlKSB7XG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgbGV0IGNvbXBsZXRlRXJyb3JNZXNzYWdlID0gJyc7XG4gICAgY29uc3QgcmUgPSAvYXQgKFteXFxzXSspXFxzXFwoL2c7XG4gICAgY29uc3Qgc3RhY2tUcmFjZSA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIGNvbnN0IHN0YWNrRnVuY3Rpb25zID0gW107XG5cbiAgICBsZXQgZnVuY05hbWUgPSByZS5leGVjKHN0YWNrVHJhY2UpO1xuICAgIHdoaWxlIChmdW5jTmFtZSAmJiBmdW5jTmFtZVsxXSkge1xuICAgICAgc3RhY2tGdW5jdGlvbnMucHVzaChmdW5jTmFtZVsxXSk7XG4gICAgICBmdW5jTmFtZSA9IHJlLmV4ZWMoc3RhY2tUcmFjZSk7XG4gICAgfVxuXG4gICAgLy8gTnVtYmVyIDAgaXMgcHJvY2Vzc0NvbmRpdGlvbiBpdHNlbGYsXG4gICAgLy8gTnVtYmVyIDEgaXMgYXNzZXJ0LFxuICAgIC8vIE51bWJlciAyIGlzIHRoZSBjYWxsZXIgZnVuY3Rpb24uXG4gICAgaWYgKHN0YWNrRnVuY3Rpb25zWzJdKSB7XG4gICAgICBjb21wbGV0ZUVycm9yTWVzc2FnZSA9IGAke3N0YWNrRnVuY3Rpb25zWzJdfTogJHtjb21wbGV0ZUVycm9yTWVzc2FnZX1gO1xuICAgIH1cblxuICAgIGNvbXBsZXRlRXJyb3JNZXNzYWdlICs9IGVycm9yTWVzc2FnZTtcbiAgICByZXR1cm4gY29tcGxldGVFcnJvck1lc3NhZ2U7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBUaHJvd3MgYW4gZXJyb3IgaWYgdGhlIGJvb2xlYW4gcGFzc2VkIHRvIGl0IGV2YWx1YXRlcyB0byBmYWxzZS5cbiAqIFRvIGJlIHVzZWQgbGlrZSB0aGlzOlxuICogXHRcdGFzc2VydChteURhdGUgIT09IHVuZGVmaW5lZCwgXCJEYXRlIGNhbm5vdCBiZSB1bmRlZmluZWQuXCIpO1xuICogQGFwaSBwdWJsaWNcbiAqIEBtZXRob2QgYXNzZXJ0XG4gKiBAcGFyYW0gIHtCb29sZWFufSBjb25kaXRpb24gLSBSZXN1bHQgb2YgdGhlIGV2YWx1YXRlZCBjb25kaXRpb25cbiAqIEBwYXJhbSAge1N0cmluZ30gZXJyb3JNZXNzYWdlIC0gTWVzc2FnZSBleHBsYWluaWcgdGhlIGVycm9yIGluIGNhc2UgaXQgaXMgdGhyb3duXG4gKiBAcmV0dXJuIHZvaWRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KGNvbmRpdGlvbiwgZXJyb3JNZXNzYWdlKSB7XG4gIGNvbnN0IGVycm9yID0gcHJvY2Vzc0NvbmRpdGlvbihjb25kaXRpb24sIGVycm9yTWVzc2FnZSk7XG4gIGlmICh0eXBlb2YgZXJyb3IgPT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKTtcbiAgfVxufVxuXG4vKipcbiAqIExvZ3MgYSB3YXJuaW5nIGlmIHRoZSBib29sZWFuIHBhc3NlZCB0byBpdCBldmFsdWF0ZXMgdG8gZmFsc2UuXG4gKiBUbyBiZSB1c2VkIGxpa2UgdGhpczpcbiAqIFx0XHRhc3NlcnQud2FybihteURhdGUgIT09IHVuZGVmaW5lZCwgXCJObyBkYXRlIHByb3ZpZGVkLlwiKTtcbiAqIEBhcGkgcHVibGljXG4gKiBAbWV0aG9kIHdhcm5cbiAqIEBwYXJhbSAge0Jvb2xlYW59IGNvbmRpdGlvbiAtIFJlc3VsdCBvZiB0aGUgZXZhbHVhdGVkIGNvbmRpdGlvblxuICogQHBhcmFtICB7U3RyaW5nfSBlcnJvck1lc3NhZ2UgLSBNZXNzYWdlIGV4cGxhaW5pZyB0aGUgZXJyb3IgaW4gY2FzZSBpdCBpcyB0aHJvd25cbiAqIEByZXR1cm4gdm9pZFxuICovXG5hc3NlcnQud2FybiA9IGZ1bmN0aW9uIHdhcm4oY29uZGl0aW9uLCBlcnJvck1lc3NhZ2UpIHtcbiAgY29uc3QgZXJyb3IgPSBwcm9jZXNzQ29uZGl0aW9uKGNvbmRpdGlvbiwgZXJyb3JNZXNzYWdlKTtcbiAgaWYgKHR5cGVvZiBlcnJvciA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zb2xlLndhcm4oZXJyb3IpO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhc3NlcnQ7XG4iXSwiZmlsZSI6ImFzc2VydC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9\n","import { curry } from 'ramda';\nimport assert from 'fl-assert';\n\n/**\n  type Validation\n    = Success a\n    | Failure b\n */\n\nconst types = {\n  Success: Math.random(),\n  Failure: Math.random(),\n};\n\nconst mapIf = curry((condition, value, f) => (condition ? f(value) : value));\n\n// This function should never be called by anyone other than this file.\nfunction Validation(value, type) {\n  // Check that a valid type is being used\n  const isSuccess = type === types.Success;\n\n  this.isSuccess = isSuccess;\n  this.isFailure = !isSuccess;\n  this.withDefault = defaultVal => (isSuccess ? value : defaultVal);\n  this.map = f => new Validation(mapIf(isSuccess, value, f), type);\n  this.mapSuccess = f => new Validation(mapIf(isSuccess, value, f), type);\n  this.mapFailure = f => new Validation(mapIf(!isSuccess, value, f), type);\n  this.throwFailure = _ => (!isSuccess\n    ? assert(false, value)\n    : this\n  );\n  this.andThen = f => {\n    if (!isSuccess) {\n      return this;\n    }\n\n    const val = f(value);\n    assert(\n      val instanceof Validation,\n      'Value returned by Validation.andThen is not of type Validation'\n    );\n    return val;\n  };\n  // Validation -> Validation\n  this.chain = v => {\n    if (!isSuccess) { return this; }\n\n    assert(\n      v instanceof Validation,\n      'Value passed to Validation.chain is not of type Validation'\n    );\n\n    return v;\n  };\n  // JUST FOR DEBUGGING PURPOSES. DO NOT USE\n  this._value = value; // eslint-disable-line no-underscore-dangle\n}\n\n// Static functions\nValidation.Success = v => new Validation(v, types.Success);\nValidation.Failure = v => new Validation(v, types.Failure);\n\nValidation.isSuccess = v => v.isSuccess;\nValidation.isFailure = v => v.isFailure;\nValidation.withDefault = curry((defaultVal, v) => v.withDefault(defaultVal));\nValidation.map = curry((f, v) => v.map(f));\nValidation.mapSuccess = curry((f, v) => v.mapSuccess(f));\nValidation.mapFailure = curry((f, v) => v.mapFailure(f));\nValidation.throwFailure = v => v.throwFailure();\nValidation.andThen = curry((f, v) => v.andThen(f));\nValidation.chain = curry((v1, v2) => v1.chain(v2));\n\nexport default Validation;\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Checks if the input value is `null` or `undefined`.\n *\n * @func\n * @memberOf R\n * @since v0.9.0\n * @category Type\n * @sig * -> Boolean\n * @param {*} x The value to test.\n * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n * @example\n *\n *      R.isNil(null); //=> true\n *      R.isNil(undefined); //=> true\n *      R.isNil(0); //=> false\n *      R.isNil([]); //=> false\n */\nmodule.exports = _curry1(function isNil(x) { return x == null; });\n","module.exports = function _pipe(f, g) {\n  return function() {\n    return g.call(this, f.apply(this, arguments));\n  };\n};\n","var _curry1 = require('./_curry1');\nvar _curry2 = require('./_curry2');\nvar _isPlaceholder = require('./_isPlaceholder');\n\n\n/**\n * Optimized internal three-arity curry function.\n *\n * @private\n * @category Function\n * @param {Function} fn The function to curry.\n * @return {Function} The curried function.\n */\nmodule.exports = function _curry3(fn) {\n  return function f3(a, b, c) {\n    switch (arguments.length) {\n      case 0:\n        return f3;\n      case 1:\n        return _isPlaceholder(a) ? f3\n             : _curry2(function(_b, _c) { return fn(a, _b, _c); });\n      case 2:\n        return _isPlaceholder(a) && _isPlaceholder(b) ? f3\n             : _isPlaceholder(a) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _curry1(function(_c) { return fn(a, b, _c); });\n      default:\n        return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3\n             : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function(_a, _b) { return fn(_a, _b, c); })\n             : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function(_a, _c) { return fn(_a, b, _c); })\n             : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function(_b, _c) { return fn(a, _b, _c); })\n             : _isPlaceholder(a) ? _curry1(function(_a) { return fn(_a, b, c); })\n             : _isPlaceholder(b) ? _curry1(function(_b) { return fn(a, _b, c); })\n             : _isPlaceholder(c) ? _curry1(function(_c) { return fn(a, b, _c); })\n             : fn(a, b, c);\n    }\n  };\n};\n","module.exports = (function() {\n  function XWrap(fn) {\n    this.f = fn;\n  }\n  XWrap.prototype['@@transducer/init'] = function() {\n    throw new Error('init not implemented on XWrap');\n  };\n  XWrap.prototype['@@transducer/result'] = function(acc) { return acc; };\n  XWrap.prototype['@@transducer/step'] = function(acc, x) {\n    return this.f(acc, x);\n  };\n\n  return function _xwrap(fn) { return new XWrap(fn); };\n}());\n","var _arity = require('./internal/_arity');\nvar _curry2 = require('./internal/_curry2');\n\n\n/**\n * Creates a function that is bound to a context.\n * Note: `R.bind` does not provide the additional argument-binding capabilities of\n * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Function\n * @category Object\n * @sig (* -> *) -> {*} -> (* -> *)\n * @param {Function} fn The function to bind to context\n * @param {Object} thisObj The context to bind `fn` to\n * @return {Function} A function that will execute in the context of `thisObj`.\n * @see R.partial\n * @example\n *\n *      var log = R.bind(console.log, console);\n *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n *      // logs {a: 2}\n */\nmodule.exports = _curry2(function bind(fn, thisObj) {\n  return _arity(fn.length, function() {\n    return fn.apply(thisObj, arguments);\n  });\n});\n","/**\n * Tests whether or not an object is an array.\n *\n * @private\n * @param {*} val The object to test.\n * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n * @example\n *\n *      _isArray([]); //=> true\n *      _isArray(null); //=> false\n *      _isArray({}); //=> false\n */\nmodule.exports = Array.isArray || function _isArray(val) {\n  return (val != null &&\n          val.length >= 0 &&\n          Object.prototype.toString.call(val) === '[object Array]');\n};\n","module.exports = function _isString(x) {\n  return Object.prototype.toString.call(x) === '[object String]';\n};\n","var _curry1 = require('./internal/_curry1');\nvar _isArray = require('./internal/_isArray');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Tests whether or not an object is similar to an array.\n *\n * @func\n * @memberOf R\n * @since v0.5.0\n * @category Type\n * @category List\n * @sig * -> Boolean\n * @param {*} x The object to test.\n * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n * @example\n *\n *      R.isArrayLike([]); //=> true\n *      R.isArrayLike(true); //=> false\n *      R.isArrayLike({}); //=> false\n *      R.isArrayLike({length: 10}); //=> false\n *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n */\nmodule.exports = _curry1(function isArrayLike(x) {\n  if (_isArray(x)) { return true; }\n  if (!x) { return false; }\n  if (typeof x !== 'object') { return false; }\n  if (_isString(x)) { return false; }\n  if (x.nodeType === 1) { return !!x.length; }\n  if (x.length === 0) { return true; }\n  if (x.length > 0) {\n    return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n  }\n  return false;\n});\n","var _xwrap = require('./_xwrap');\nvar bind = require('../bind');\nvar isArrayLike = require('../isArrayLike');\n\n\nmodule.exports = (function() {\n  function _arrayReduce(xf, acc, list) {\n    var idx = 0;\n    var len = list.length;\n    while (idx < len) {\n      acc = xf['@@transducer/step'](acc, list[idx]);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      idx += 1;\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _iterableReduce(xf, acc, iter) {\n    var step = iter.next();\n    while (!step.done) {\n      acc = xf['@@transducer/step'](acc, step.value);\n      if (acc && acc['@@transducer/reduced']) {\n        acc = acc['@@transducer/value'];\n        break;\n      }\n      step = iter.next();\n    }\n    return xf['@@transducer/result'](acc);\n  }\n\n  function _methodReduce(xf, acc, obj) {\n    return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n  }\n\n  var symIterator = (typeof Symbol !== 'undefined') ? Symbol.iterator : '@@iterator';\n  return function _reduce(fn, acc, list) {\n    if (typeof fn === 'function') {\n      fn = _xwrap(fn);\n    }\n    if (isArrayLike(list)) {\n      return _arrayReduce(fn, acc, list);\n    }\n    if (typeof list.reduce === 'function') {\n      return _methodReduce(fn, acc, list);\n    }\n    if (list[symIterator] != null) {\n      return _iterableReduce(fn, acc, list[symIterator]());\n    }\n    if (typeof list.next === 'function') {\n      return _iterableReduce(fn, acc, list);\n    }\n    throw new TypeError('reduce: list must be array or iterable');\n  };\n}());\n","var _curry3 = require('./internal/_curry3');\nvar _reduce = require('./internal/_reduce');\n\n\n/**\n * Returns a single item by iterating through the list, successively calling\n * the iterator function and passing it an accumulator value and the current\n * value from the array, and then passing the result to the next call.\n *\n * The iterator function receives two values: *(acc, value)*. It may use\n * `R.reduced` to shortcut the iteration.\n *\n * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n * arrays), unlike the native `Array.prototype.reduce` method. For more details\n * on this behavior, see:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n *\n * Dispatches to the `reduce` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig ((a, b) -> a) -> a -> [b] -> a\n * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n *        current element from the array.\n * @param {*} acc The accumulator value.\n * @param {Array} list The list to iterate over.\n * @return {*} The final, accumulated value.\n * @see R.reduced, R.addIndex\n * @example\n *\n *      var numbers = [1, 2, 3];\n *      var plus = (a, b) => a + b;\n *\n *      R.reduce(plus, 10, numbers); //=> 16\n */\nmodule.exports = _curry3(_reduce);\n","/**\n * An optimized, private array `slice` implementation.\n *\n * @private\n * @param {Arguments|Array} args The array or arguments object to consider.\n * @param {Number} [from=0] The array index to slice from, inclusive.\n * @param {Number} [to=args.length] The array index to slice to, exclusive.\n * @return {Array} A new, sliced array.\n * @example\n *\n *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n *\n *      var firstThreeArgs = function(a, b, c, d) {\n *        return _slice(arguments, 0, 3);\n *      };\n *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n */\nmodule.exports = function _slice(args, from, to) {\n  switch (arguments.length) {\n    case 1: return _slice(args, 0, args.length);\n    case 2: return _slice(args, from, args.length);\n    default:\n      var list = [];\n      var idx = 0;\n      var len = Math.max(0, Math.min(args.length, to) - from);\n      while (idx < len) {\n        list[idx] = args[from + idx];\n        idx += 1;\n      }\n      return list;\n  }\n};\n","var _isArray = require('./_isArray');\nvar _slice = require('./_slice');\n\n\n/**\n * Similar to hasMethod, this checks whether a function has a [methodname]\n * function. If it isn't an array it will execute that function otherwise it\n * will default to the ramda implementation.\n *\n * @private\n * @param {Function} fn ramda implemtation\n * @param {String} methodname property to check for a custom implementation\n * @return {Object} Whatever the return value of the method is.\n */\nmodule.exports = function _checkForMethod(methodname, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    return (_isArray(obj) || typeof obj[methodname] !== 'function') ?\n      fn.apply(this, arguments) :\n      obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n  };\n};\n","var _checkForMethod = require('./internal/_checkForMethod');\nvar _curry3 = require('./internal/_curry3');\n\n\n/**\n * Returns the elements of the given list or string (or object with a `slice`\n * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n *\n * Dispatches to the `slice` method of the third argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.4\n * @category List\n * @sig Number -> Number -> [a] -> [a]\n * @sig Number -> Number -> String -> String\n * @param {Number} fromIndex The start index (inclusive).\n * @param {Number} toIndex The end index (exclusive).\n * @param {*} list\n * @return {*}\n * @example\n *\n *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n */\nmodule.exports = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n  return Array.prototype.slice.call(list, fromIndex, toIndex);\n}));\n","var _checkForMethod = require('./internal/_checkForMethod');\nvar slice = require('./slice');\n\n\n/**\n * Returns all but the first element of the given list or string (or object\n * with a `tail` method).\n *\n * Dispatches to the `slice` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a]\n * @sig String -> String\n * @param {*} list\n * @return {*}\n * @see R.head, R.init, R.last\n * @example\n *\n *      R.tail([1, 2, 3]);  //=> [2, 3]\n *      R.tail([1, 2]);     //=> [2]\n *      R.tail([1]);        //=> []\n *      R.tail([]);         //=> []\n *\n *      R.tail('abc');  //=> 'bc'\n *      R.tail('ab');   //=> 'b'\n *      R.tail('a');    //=> ''\n *      R.tail('');     //=> ''\n */\nmodule.exports = _checkForMethod('tail', slice(1, Infinity));\n","var _arity = require('./internal/_arity');\nvar _pipe = require('./internal/_pipe');\nvar reduce = require('./reduce');\nvar tail = require('./tail');\n\n\n/**\n * Performs left-to-right function composition. The leftmost function may have\n * any arity; the remaining functions must be unary.\n *\n * In some libraries this function is named `sequence`.\n *\n * **Note:** The result of pipe is not automatically curried.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n * @param {...Function} functions\n * @return {Function}\n * @see R.compose\n * @example\n *\n *      var f = R.pipe(Math.pow, R.negate, R.inc);\n *\n *      f(3, 4); // -(3^4) + 1\n */\nmodule.exports = function pipe() {\n  if (arguments.length === 0) {\n    throw new Error('pipe requires at least one argument');\n  }\n  return _arity(arguments[0].length,\n                reduce(_pipe, arguments[0], tail(arguments)));\n};\n","/* eslint-disable new-cap */\nimport Validation from './Validation';\nimport Maybe from './Maybe';\nimport { curry, pipe, isNil } from 'ramda';\n\nexport const errMsg = curry((prop, errorMessage) =>\n  `Invalid property value for ${prop}. ${errorMessage}`\n);\n\n// All type checks return a Validation object.\n// ===================================================================\n//  General Type checkers\n// ===================================================================\n\nexport const int = v => (\n  typeof v === 'number' && (v % 1) === 0\n    ? Validation.Success(v)\n    : Validation.Failure(`${v} is not an integer`)\n);\n\nexport const float = v => (\n  typeof v === 'number'\n    ? Validation.Success(v)\n    : Validation.Failure(`${v} is not a float`)\n);\n\nexport const string = v => (\n  typeof v === 'string'\n    ? Validation.Success(v)\n    : Validation.Failure(`${v} is not a string`)\n);\n\nexport const bool = v => (\n  typeof v === 'boolean'\n    ? Validation.Success(v)\n    : Validation.Failure(`${v} is not a boolean`)\n);\n\nexport const nullType = v => (\n  typeof v === 'object' && v === null\n    ? Validation.Success(v)\n    : Validation.Failure(`${v} is not null`)\n);\n\nexport const array = curry((subType, v) => {\n  if (v instanceof Validation) {\n    return Validation.andThen(array, v);\n  }\n\n  if (!Array.isArray(v)) {\n    return Validation.Failure(`${v} is not an array`);\n  }\n\n  const subTypesValidation = v\n    .map(subType)\n    .reduce(Validation.chain, Validation.Success(v));\n\n  if (Validation.isSuccess(subTypesValidation)) {\n    return Validation.Success(v);\n  }\n  return Validation.mapFailure(errMsg('array'), subTypesValidation);\n});\n\nexport const date = v => (\n  v !== undefined && v instanceof Date\n    ? Validation.Success(v)\n    : Validation.Failure(`${v} is not a Date`)\n);\n\nexport const nullable = curry((subType, v) => (\n   v === null\n   ? Validation.Success(v)\n   : subType(v)\n));\n\nexport const maybe = curry((subType, v) => (\n  typeof v === 'object' && Validation.isSuccess(bool(v.isNothing))\n    ? pipe(\n        Maybe.map(subType),\n        Maybe.map(Validation.map(_ => Validation.Success(v))),\n        Maybe.withDefault(Validation.Success(v)),\n      )(v)\n    : Validation.Failure(`${v} is not of type Maybe`)\n));\n\nexport const remoteData = v => (\n  typeof v === 'object' && Validation.isSuccess(bool(v.isNotAsked))\n    ? Validation.Success(v)\n    : Validation.Failure(`${v} is not of type RemoteData.`)\n);\n\nexport const request = v => (\n  typeof v === 'object' && v instanceof Request\n    ? Validation.Success(v)\n    : Validation.Failure(`${v} is not of type Request.`)\n);\n\nexport const response = v => (\n  typeof v === 'object' && v instanceof Response\n    ? Validation.Success(v)\n    : Validation.Failure(`${v} is not of type Response.`)\n);\n\nconst haveSameKeys = (o1, o2) => {\n  const k1 = Object.keys(o1);\n  const k2 = Object.keys(o2);\n  return k1.reduce((out, key) => out && k2.includes(key), true);\n};\n\nexport const object = curry((typeSignature, v) => {\n  if (isNil(v)) {\n    return Validation.Failure(`${v} is not of type object.`);\n  }\n  if (!haveSameKeys(typeSignature, v)) {\n    return Validation.Failure(\n      `Object does not have same keys as its type signature:\n      Keys present: ${Object.keys(v)}\n      Keys expected: ${Object.keys(typeSignature)}\n      ${v}`\n    );\n  }\n\n  return Object.keys(typeSignature)\n  .reduce(\n    (outcome, key) =>\n      Validation.chain(\n        outcome,\n        pipe(\n            typeSignature[key],\n            Validation.mapFailure(errMsg(key)),\n            Validation.mapSuccess(_ => v)\n          )(v[key])\n      ),\n      Validation.Success(v)\n  );\n});\n\nexport default {\n  int,\n  float,\n  string,\n  bool,\n  nullType,\n  nullable,\n  array,\n  date,\n  maybe,\n  remoteData,\n  request,\n  response,\n  object,\n};\n","module.exports = function _has(prop, obj) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n","var _curry3 = require('./internal/_curry3');\nvar _has = require('./internal/_has');\n\n\n/**\n * If the given, non-null object has an own property with the specified name,\n * returns the value of that property. Otherwise returns the provided default\n * value.\n *\n * @func\n * @memberOf R\n * @since v0.6.0\n * @category Object\n * @sig a -> String -> Object -> a\n * @param {*} val The default value.\n * @param {String} p The name of the property to return.\n * @param {Object} obj The object to query.\n * @return {*} The value of given property of the supplied object or the default value.\n * @example\n *\n *      var alice = {\n *        name: 'ALICE',\n *        age: 101\n *      };\n *      var favorite = R.prop('favoriteLibrary');\n *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n *\n *      favorite(alice);  //=> undefined\n *      favoriteWithDefault(alice);  //=> 'Ramda'\n */\nmodule.exports = _curry3(function propOr(val, p, obj) {\n  return (obj != null && _has(p, obj)) ? obj[p] : val;\n});\n","(function() {\n  \"use strict\";\n\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L21\n  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol.for && Symbol.for('react.element');\n  var REACT_ELEMENT_TYPE_FALLBACK = 0xeac7;\n\n  function addPropertyTo(target, methodName, value) {\n    Object.defineProperty(target, methodName, {\n      enumerable: false,\n      configurable: false,\n      writable: false,\n      value: value\n    });\n  }\n\n  function banProperty(target, methodName) {\n    addPropertyTo(target, methodName, function() {\n      throw new ImmutableError(\"The \" + methodName +\n        \" method cannot be invoked on an Immutable data structure.\");\n    });\n  }\n\n  var immutabilityTag = \"__immutable_invariants_hold\";\n\n  function addImmutabilityTag(target) {\n    addPropertyTo(target, immutabilityTag, true);\n  }\n\n  function isImmutable(target) {\n    if (typeof target === \"object\") {\n      return target === null || Boolean(\n        Object.getOwnPropertyDescriptor(target, immutabilityTag)\n      );\n    } else {\n      // In JavaScript, only objects are even potentially mutable.\n      // strings, numbers, null, and undefined are all naturally immutable.\n      return true;\n    }\n  }\n\n  function isEqual(a, b) {\n    // Avoid false positives due to (NaN !== NaN) evaluating to true\n    return (a === b || (a !== a && b !== b));\n  }\n\n  function isMergableObject(target) {\n    return target !== null && typeof target === \"object\" && !(Array.isArray(target)) && !(target instanceof Date);\n  }\n\n  var mutatingObjectMethods = [\n    \"setPrototypeOf\"\n  ];\n\n  var nonMutatingObjectMethods = [\n    \"keys\"\n  ];\n\n  var mutatingArrayMethods = mutatingObjectMethods.concat([\n    \"push\", \"pop\", \"sort\", \"splice\", \"shift\", \"unshift\", \"reverse\"\n  ]);\n\n  var nonMutatingArrayMethods = nonMutatingObjectMethods.concat([\n    \"map\", \"filter\", \"slice\", \"concat\", \"reduce\", \"reduceRight\"\n  ]);\n\n  var mutatingDateMethods = mutatingObjectMethods.concat([\n    \"setDate\", \"setFullYear\", \"setHours\", \"setMilliseconds\", \"setMinutes\", \"setMonth\", \"setSeconds\",\n    \"setTime\", \"setUTCDate\", \"setUTCFullYear\", \"setUTCHours\", \"setUTCMilliseconds\", \"setUTCMinutes\",\n    \"setUTCMonth\", \"setUTCSeconds\", \"setYear\"\n  ]);\n\n  function ImmutableError(message) {\n    var err       = new Error(message);\n    // TODO: Consider `Object.setPrototypeOf(err, ImmutableError);`\n    err.__proto__ = ImmutableError;\n\n    return err;\n  }\n  ImmutableError.prototype = Error.prototype;\n\n  function makeImmutable(obj, bannedMethods) {\n    // Tag it so we can quickly tell it's immutable later.\n    addImmutabilityTag(obj);\n\n    if (process.env.NODE_ENV !== \"production\") {\n      // Make all mutating methods throw exceptions.\n      for (var index in bannedMethods) {\n        if (bannedMethods.hasOwnProperty(index)) {\n          banProperty(obj, bannedMethods[index]);\n        }\n      }\n\n      // Freeze it and return it.\n      Object.freeze(obj);\n    }\n\n    return obj;\n  }\n\n  function makeMethodReturnImmutable(obj, methodName) {\n    var currentMethod = obj[methodName];\n\n    addPropertyTo(obj, methodName, function() {\n      return Immutable(currentMethod.apply(obj, arguments));\n    });\n  }\n\n  function arraySet(idx, value, config) {\n    var deep          = config && config.deep;\n\n    if (idx in this) {\n      if (deep && this[idx] !== value && isMergableObject(value) && isMergableObject(this[idx])) {\n        value = this[idx].merge(value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[idx], value)) {\n        return this;\n      }\n    }\n\n    var mutable = asMutableArray.call(this);\n    mutable[idx] = Immutable(value);\n    return makeImmutableArray(mutable);\n  }\n\n  var immutableEmptyArray = Immutable([]);\n\n  function arraySetIn(pth, value, config) {\n    var head = pth[0];\n\n    if (pth.length === 1) {\n      return arraySet.call(this, head, value, config);\n    } else {\n      var tail = pth.slice(1);\n      var thisHead = this[head];\n      var newValue;\n\n      if (typeof(thisHead) === \"object\" && thisHead !== null && typeof(thisHead.setIn) === \"function\") {\n        // Might (validly) be object or array\n        newValue = thisHead.setIn(tail, value);\n      } else {\n        var nextHead = tail[0];\n        // If the next path part is a number, then we are setting into an array, else an object.\n        if (nextHead !== '' && isFinite(nextHead)) {\n          newValue = arraySetIn.call(immutableEmptyArray, tail, value);\n        } else {\n          newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n        }\n      }\n\n      if (head in this && thisHead === newValue) {\n        return this;\n      }\n\n      var mutable = asMutableArray.call(this);\n      mutable[head] = newValue;\n      return makeImmutableArray(mutable);\n    }\n  }\n\n  function makeImmutableArray(array) {\n    // Don't change their implementations, but wrap these functions to make sure\n    // they always return an immutable value.\n    for (var index in nonMutatingArrayMethods) {\n      if (nonMutatingArrayMethods.hasOwnProperty(index)) {\n        var methodName = nonMutatingArrayMethods[index];\n        makeMethodReturnImmutable(array, methodName);\n      }\n    }\n\n    addPropertyTo(array, \"flatMap\",  flatMap);\n    addPropertyTo(array, \"asObject\", asObject);\n    addPropertyTo(array, \"asMutable\", asMutableArray);\n    addPropertyTo(array, \"set\", arraySet);\n    addPropertyTo(array, \"setIn\", arraySetIn);\n    addPropertyTo(array, \"update\", update);\n    addPropertyTo(array, \"updateIn\", updateIn);\n\n    for(var i = 0, length = array.length; i < length; i++) {\n      array[i] = Immutable(array[i]);\n    }\n\n    return makeImmutable(array, mutatingArrayMethods);\n  }\n\n  function makeImmutableDate(date) {\n    addPropertyTo(date, \"asMutable\", asMutableDate);\n\n    return makeImmutable(date, mutatingDateMethods);\n  }\n\n  function asMutableDate() {\n    return new Date(this.getTime());\n  }\n\n  /**\n   * Effectively performs a map() over the elements in the array, using the\n   * provided iterator, except that whenever the iterator returns an array, that\n   * array's elements are added to the final result instead of the array itself.\n   *\n   * @param {function} iterator - The iterator function that will be invoked on each element in the array. It will receive three arguments: the current value, the current index, and the current object.\n   */\n  function flatMap(iterator) {\n    // Calling .flatMap() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    var result = [],\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var iteratorResult = iterator(this[index], index, this);\n\n      if (Array.isArray(iteratorResult)) {\n        // Concatenate Array results into the return value we're building up.\n        result.push.apply(result, iteratorResult);\n      } else {\n        // Handle non-Array results the same way map() does.\n        result.push(iteratorResult);\n      }\n    }\n\n    return makeImmutableArray(result);\n  }\n\n  /**\n   * Returns an Immutable copy of the object without the given keys included.\n   *\n   * @param {array} keysToRemove - A list of strings representing the keys to exclude in the return value. Instead of providing a single array, this method can also be called by passing multiple strings as separate arguments.\n   */\n  function without(remove) {\n    // Calling .without() with no arguments is a no-op. Don't bother cloning.\n    if (typeof remove === \"undefined\" && arguments.length === 0) {\n      return this;\n    }\n\n    if (typeof remove !== \"function\") {\n      // If we weren't given an array, use the arguments list.\n      var keysToRemoveArray = (Array.isArray(remove)) ?\n         remove.slice() : Array.prototype.slice.call(arguments);\n\n      // Convert numeric keys to strings since that's how they'll\n      // come from the enumeration of the object.\n      keysToRemoveArray.forEach(function(el, idx, arr) {\n        if(typeof(el) === \"number\") {\n          arr[idx] = el.toString();\n        }\n      });\n\n      remove = function(val, key) {\n        return keysToRemoveArray.indexOf(key) !== -1;\n      };\n    }\n\n    var result = this.instantiateEmptyObject();\n\n    for (var key in this) {\n      if (this.hasOwnProperty(key) && remove(this[key], key) === false) {\n        result[key] = this[key];\n      }\n    }\n\n    return makeImmutableObject(result,\n      {instantiateEmptyObject: this.instantiateEmptyObject});\n  }\n\n  function asMutableArray(opts) {\n    var result = [], i, length;\n\n    if(opts && opts.deep) {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(asDeepMutable(this[i]));\n      }\n    } else {\n      for(i = 0, length = this.length; i < length; i++) {\n        result.push(this[i]);\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Effectively performs a [map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) over the elements in the array, expecting that the iterator function\n   * will return an array of two elements - the first representing a key, the other\n   * a value. Then returns an Immutable Object constructed of those keys and values.\n   *\n   * @param {function} iterator - A function which should return an array of two elements - the first representing the desired key, the other the desired value.\n   */\n  function asObject(iterator) {\n    // If no iterator was provided, assume the identity function\n    // (suggesting this array is already a list of key/value pairs.)\n    if (typeof iterator !== \"function\") {\n      iterator = function(value) { return value; };\n    }\n\n    var result = {},\n        length = this.length,\n        index;\n\n    for (index = 0; index < length; index++) {\n      var pair  = iterator(this[index], index, this),\n          key   = pair[0],\n          value = pair[1];\n\n      result[key] = value;\n    }\n\n    return makeImmutableObject(result);\n  }\n\n  function asDeepMutable(obj) {\n    if (\n      (!obj) ||\n      (typeof obj !== 'object') ||\n      (!Object.getOwnPropertyDescriptor(obj, immutabilityTag)) ||\n      (obj instanceof Date)\n    ) { return obj; }\n    return obj.asMutable({deep: true});\n  }\n\n  function quickCopy(src, dest) {\n    for (var key in src) {\n      if (Object.getOwnPropertyDescriptor(src, key)) {\n        dest[key] = src[key];\n      }\n    }\n\n    return dest;\n  }\n\n  /**\n   * Returns an Immutable Object containing the properties and values of both\n   * this object and the provided object, prioritizing the provided object's\n   * values whenever the same key is present in both objects.\n   *\n   * @param {object} other - The other object to merge. Multiple objects can be passed as an array. In such a case, the later an object appears in that list, the higher its priority.\n   * @param {object} config - Optional config object that contains settings. Supported settings are: {deep: true} for deep merge and {merger: mergerFunc} where mergerFunc is a function\n   *                          that takes a property from both objects. If anything is returned it overrides the normal merge behaviour.\n   */\n  function merge(other, config) {\n    // Calling .merge() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (other === null || (typeof other !== \"object\")) {\n      throw new TypeError(\"Immutable#merge can only be invoked with objects or arrays, not \" + JSON.stringify(other));\n    }\n\n    var receivedArray = (Array.isArray(other)),\n        deep          = config && config.deep,\n        mode          = config && config.mode || 'merge',\n        merger        = config && config.merger,\n        result;\n\n    // Use the given key to extract a value from the given object, then place\n    // that value in the result object under the same key. If that resulted\n    // in a change from this object's value at that key, set anyChanges = true.\n    function addToResult(currentObj, otherObj, key) {\n      var immutableValue = Immutable(otherObj[key]);\n      var mergerResult = merger && merger(currentObj[key], immutableValue, config);\n      var currentValue = currentObj[key];\n\n      if ((result !== undefined) ||\n        (mergerResult !== undefined) ||\n        (!currentObj.hasOwnProperty(key)) ||\n        !isEqual(immutableValue, currentValue)) {\n\n        var newValue;\n\n        if (mergerResult) {\n          newValue = mergerResult;\n        } else if (deep && isMergableObject(currentValue) && isMergableObject(immutableValue)) {\n          newValue = currentValue.merge(immutableValue, config);\n        } else {\n          newValue = immutableValue;\n        }\n\n        if (!isEqual(currentValue, newValue) || !currentObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, currentObj.instantiateEmptyObject());\n          }\n\n          result[key] = newValue;\n        }\n      }\n    }\n\n    function clearDroppedKeys(currentObj, otherObj) {\n      for (var key in currentObj) {\n        if (!otherObj.hasOwnProperty(key)) {\n          if (result === undefined) {\n            // Make a shallow clone of the current object.\n            result = quickCopy(currentObj, currentObj.instantiateEmptyObject());\n          }\n          delete result[key];\n        }\n      }\n    }\n\n    var key;\n\n    // Achieve prioritization by overriding previous values that get in the way.\n    if (!receivedArray) {\n      // The most common use case: just merge one object into the existing one.\n      for (key in other) {\n        if (Object.getOwnPropertyDescriptor(other, key)) {\n          addToResult(this, other, key);\n        }\n      }\n      if (mode === 'replace') {\n        clearDroppedKeys(this, other);\n      }\n    } else {\n      // We also accept an Array\n      for (var index = 0, length = other.length; index < length; index++) {\n        var otherFromArray = other[index];\n\n        for (key in otherFromArray) {\n          if (otherFromArray.hasOwnProperty(key)) {\n            addToResult(result !== undefined ? result : this, otherFromArray, key);\n          }\n        }\n      }\n    }\n\n    if (result === undefined) {\n      return this;\n    } else {\n      return makeImmutableObject(result,\n        {instantiateEmptyObject: this.instantiateEmptyObject});\n    }\n  }\n\n  function objectReplace(value, config) {\n    var deep          = config && config.deep;\n\n    // Calling .replace() with no arguments is a no-op. Don't bother cloning.\n    if (arguments.length === 0) {\n      return this;\n    }\n\n    if (value === null || typeof value !== \"object\") {\n      throw new TypeError(\"Immutable#replace can only be invoked with objects or arrays, not \" + JSON.stringify(value));\n    }\n\n    return this.merge(value, {deep: deep, mode: 'replace'});\n  }\n\n  var immutableEmptyObject = Immutable({});\n\n  function objectSetIn(path, value, config) {\n    var head = path[0];\n    if (path.length === 1) {\n      return objectSet.call(this, head, value, config);\n    }\n\n    var tail = path.slice(1);\n    var newValue;\n    var thisHead = this[head];\n\n    if (this.hasOwnProperty(head) && typeof(thisHead) === \"object\" && thisHead !== null && typeof(thisHead.setIn) === \"function\") {\n      // Might (validly) be object or array\n      newValue = thisHead.setIn(tail, value);\n    } else {\n      newValue = objectSetIn.call(immutableEmptyObject, tail, value);\n    }\n\n    if (this.hasOwnProperty(head) && thisHead === newValue) {\n      return this;\n    }\n\n    var mutable = quickCopy(this, this.instantiateEmptyObject());\n    mutable[head] = newValue;\n    return makeImmutableObject(mutable, this);\n  }\n\n  function objectSet(property, value, config) {\n    var deep          = config && config.deep;\n\n    if (this.hasOwnProperty(property)) {\n      if (deep && this[property] !== value && isMergableObject(value) && isMergableObject(this[property])) {\n        value = this[property].merge(value, {deep: true, mode: 'replace'});\n      }\n      if (isEqual(this[property], value)) {\n        return this;\n      }\n    }\n\n    var mutable = quickCopy(this, this.instantiateEmptyObject());\n    mutable[property] = Immutable(value);\n    return makeImmutableObject(mutable, this);\n  }\n\n  function update(property, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = this[property];\n    return this.set(property, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function getInPath(obj, path) {\n    /*jshint eqnull:true */\n    for (var i = 0, l = path.length; obj != null && i < l; i++) {\n      obj = obj[path[i]];\n    }\n\n    return (i && i == l) ? obj : undefined;\n  }\n\n  function updateIn(path, updater) {\n    var restArgs = Array.prototype.slice.call(arguments, 2);\n    var initialVal = getInPath(this, path);\n\n    return this.setIn(path, updater.apply(initialVal, [initialVal].concat(restArgs)));\n  }\n\n  function asMutableObject(opts) {\n    var result = this.instantiateEmptyObject(), key;\n\n    if(opts && opts.deep) {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = asDeepMutable(this[key]);\n        }\n      }\n    } else {\n      for (key in this) {\n        if (this.hasOwnProperty(key)) {\n          result[key] = this[key];\n        }\n      }\n    }\n\n    return result;\n  }\n\n  // Creates plain object to be used for cloning\n  function instantiatePlainObject() {\n    return {};\n  }\n\n  // Finalizes an object with immutable methods, freezes it, and returns it.\n  function makeImmutableObject(obj, options) {\n    var instantiateEmptyObject =\n      (options && options.instantiateEmptyObject) ?\n        options.instantiateEmptyObject : instantiatePlainObject;\n\n    addPropertyTo(obj, \"merge\", merge);\n    addPropertyTo(obj, \"replace\", objectReplace);\n    addPropertyTo(obj, \"without\", without);\n    addPropertyTo(obj, \"asMutable\", asMutableObject);\n    addPropertyTo(obj, \"instantiateEmptyObject\", instantiateEmptyObject);\n    addPropertyTo(obj, \"set\", objectSet);\n    addPropertyTo(obj, \"setIn\", objectSetIn);\n    addPropertyTo(obj, \"update\", update);\n    addPropertyTo(obj, \"updateIn\", updateIn);\n\n    return makeImmutable(obj, mutatingObjectMethods);\n  }\n\n  // Returns true if object is a valid react element\n  // https://github.com/facebook/react/blob/v15.0.1/src/isomorphic/classic/element/ReactElement.js#L326\n  function isReactElement(obj) {\n    return typeof obj === 'object' &&\n           obj !== null &&\n           (obj.$$typeof === REACT_ELEMENT_TYPE_FALLBACK || obj.$$typeof === REACT_ELEMENT_TYPE);\n  }\n\n  function Immutable(obj, options, stackRemaining) {\n    if (isImmutable(obj) || isReactElement(obj)) {\n      return obj;\n    } else if (Array.isArray(obj)) {\n      return makeImmutableArray(obj.slice());\n    } else if (obj instanceof Date) {\n      return makeImmutableDate(new Date(obj.getTime()));\n    } else {\n      // Don't freeze the object we were given; make a clone and use that.\n      var prototype = options && options.prototype;\n      var instantiateEmptyObject =\n        (!prototype || prototype === Object.prototype) ?\n          instantiatePlainObject : (function() { return Object.create(prototype); });\n      var clone = instantiateEmptyObject();\n\n      if (process.env.NODE_ENV !== \"production\") {\n        /*jshint eqnull:true */\n        if (stackRemaining == null) {\n          stackRemaining = 64;\n        }\n        if (stackRemaining <= 0) {\n          throw new ImmutableError(\"Attempt to construct Immutable from a deeply nested object was detected.\" +\n            \" Have you tried to wrap an object with circular references (e.g. React element)?\" +\n            \" See https://github.com/rtfeldman/seamless-immutable/wiki/Deeply-nested-object-was-detected for details.\");\n        }\n        stackRemaining -= 1;\n      }\n\n      for (var key in obj) {\n        if (Object.getOwnPropertyDescriptor(obj, key)) {\n          clone[key] = Immutable(obj[key], undefined, stackRemaining);\n        }\n      }\n\n      return makeImmutableObject(clone,\n        {instantiateEmptyObject: instantiateEmptyObject});\n    }\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  function toStatic(fn) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      return fn.apply(self, args);\n    }\n\n    return staticWrapper;\n  }\n\n  // Wrapper to allow the use of object methods as static methods of Immutable.\n  // with the additional condition of choosing which function to call depending\n  // if argument is an array or an object.\n  function toStaticObjectOrArray(fnObject, fnArray) {\n    function staticWrapper() {\n      var args = [].slice.call(arguments);\n      var self = args.shift();\n      if (Array.isArray(self)) {\n          return fnArray.apply(self, args);\n      } else {\n          return fnObject.apply(self, args);\n      }\n    }\n\n    return staticWrapper;\n  }\n\n  // Export the library\n  Immutable.from           = Immutable;\n  Immutable.isImmutable    = isImmutable;\n  Immutable.ImmutableError = ImmutableError;\n  Immutable.merge          = toStatic(merge);\n  Immutable.replace        = toStatic(objectReplace);\n  Immutable.without        = toStatic(without);\n  Immutable.asMutable      = toStaticObjectOrArray(asMutableObject, asMutableArray);\n  Immutable.set            = toStaticObjectOrArray(objectSet, arraySet);\n  Immutable.setIn          = toStaticObjectOrArray(objectSetIn, arraySetIn);\n  Immutable.update         = toStatic(update);\n  Immutable.updateIn       = toStatic(updateIn);\n  Immutable.flatMap        = toStatic(flatMap);\n  Immutable.asObject       = toStatic(asObject);\n\n  Object.freeze(Immutable);\n\n  /* istanbul ignore if */\n  if (typeof module === \"object\") {\n    module.exports = Immutable;\n  } else if (typeof exports === \"object\") {\n    exports.Immutable = Immutable;\n  } else if (typeof window === \"object\") {\n    window.Immutable = Immutable;\n  } else if (typeof global === \"object\") {\n    global.Immutable = Immutable;\n  }\n})();\n","import Immutable from 'seamless-immutable';\nimport Validation from './Validation';\nimport { pipe } from 'ramda';\n\nexport const checkType = (typeChecker, customCheck) =>\n  pipe(\n    typeChecker,\n    Validation.throwFailure,\n    Validation.withDefault(null),\n    customCheck\n  );\n\nexport function immutableConstructor(typeChecker, customCheck = v => v) {\n  return {\n    of: pipe(\n      customCheck,\n      Immutable,\n    ),\n  };\n}\n","/* eslint-disable no-nested-ternary */\nimport { immutableConstructor } from './utils';\nimport { date, object } from './type-checkers';\nimport Maybe from './Maybe';\nimport { pipe } from 'ramda';\n// ========================================================================\n//\n//     ALL GETTERS AND SETTERS (PUBLIC OR NOT) MUST BE IN THIS FILE\n//\n// ========================================================================\n\nexport const typeCheck = object({\n  start: date,\n  end: date,\n});\n\n// CONSTRUCTOR\nconst TimeInterval = immutableConstructor(typeCheck);\n\n// PRIVATE GETTERS\nexport const getStart = model => (\n  !model ? null\n    : model.start instanceof Date ? model.start\n    : null\n);\n\nexport const getEnd = model => (\n  !model ? null\n    : model.end instanceof Date ? model.end\n    : null\n);\n// GETTERS\n// Returns the time difference betweet start and end in milliseconds\nexport const getValue = (model) => {\n  const maybeStart = pipe(\n    Maybe.of,\n    Maybe.map(getStart),\n    Maybe.map(v => v.valueOf())\n  )(model);\n\n  const maybeEnd = pipe(\n    Maybe.of,\n    Maybe.map(getEnd),\n    Maybe.map(v => v.valueOf())\n  )(model);\n  return pipe(\n    Maybe.map2((s, e) => e - s),\n    Maybe.withDefault(null)\n  )(maybeStart, maybeEnd);\n};\n\nObject.assign(TimeInterval, {\n  typeCheck,\n  getStart,\n  getEnd,\n  getValue,\n});\n\nexport default TimeInterval;\n","import { curry } from 'ramda';\nimport TimeInterval from '../TimeInterval';\nimport {\n  isRecording,\n  getStartTime,\n  getIntervals,\n  setStartTime,\n  setIntervals,\n} from './index';\n\n/**\n * Toggles a recording to on or off\n * @params {Project} model\n * @params {Date} time\n * @params {Boolean} on\n */\nexport default curry((model) => {\n  if (!isRecording(model)) {\n    return setStartTime(model, new Date());\n  }\n\n  const newInterval = TimeInterval.of({\n    start: getStartTime(model),\n    end: new Date(),\n  });\n\n  const withStartTime = setStartTime(model, null);\n  return setIntervals(withStartTime, [newInterval, ...getIntervals(model)]);\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Adds two values.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Math\n * @sig Number -> Number -> Number\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @see R.subtract\n * @example\n *\n *      R.add(2, 3);       //=>  5\n *      R.add(7)(10);      //=> 17\n */\nmodule.exports = _curry2(function add(a, b) {\n  return Number(a) + Number(b);\n});\n","import { add, pipe } from 'ramda';\nimport { getIntervals, getStartTime } from './index';\nimport TimeInterval from '../TimeInterval';\n\n/**\n * @method calculateRunningTime\n * @param  {Date} startTime\n * @param  {Array<TimeInterval>} intervals - Time intervals of type { start: Object, end: Object}\n * @return {Integer}\n */\nfunction calculateRunningTime(startTime, intervals) {\n  const intervalsSum = intervals\n    .map(TimeInterval.getValue)\n    .reduce(add, 0);\n\n  const sumSinceStartTime = !startTime\n    ? 0\n    : pipe(\n        d => ({ start: d, end: new Date() }),\n        TimeInterval.of,\n        TimeInterval.getValue\n      )(startTime);\n\n  return intervalsSum + sumSinceStartTime;\n}\n\n/**\n *\n * @param  {Recording} recording\n * @return {Integer} - Time in milliseconds\n */\nexport default (model) => {\n  const startTime = getStartTime(model);\n  const intervals = getIntervals(model);\n\n  return calculateRunningTime(startTime, intervals);\n};\n","/* eslint-disable new-cap, no-nested-ternary */\nimport { immutableConstructor } from '../utils';\nimport TimeInterval from '../TimeInterval';\nimport { nullable, array, date, object } from '../type-checkers';\nimport { isNil, propOr, pipe, curry } from 'ramda';\nimport _toggleRecording from './toggleRecording';\nimport _totalTime from './totalTime';\nimport Immutable from 'seamless-immutable';\n\n// ========================================================================\n//\n//     ALL GETTERS AND SETTERS (PUBLIC OR NOT) MUST BE IN THIS FILE\n//\n// ========================================================================\n\nexport const typeCheck = object({\n  startTime: nullable(date),\n  intervals: array(TimeInterval.typeCheck),\n});\n\n// CONSTRUCTOR\nconst Recording = immutableConstructor(\n  typeCheck,\n  r => ({\n    startTime: r && r.startTime ? r.startTime : null,\n    intervals: r && r.intervals ? r.intervals : [],\n  })\n);\n\n// PRIVATE GETTERS\nexport const getStartTime = propOr(null, 'startTime');\nexport const getIntervals = model => (\n  isNil(model) ? []\n  : isNil(model.intervals) ? []\n  : model.intervals\n);\n\n// PRIVATE SETTERS\nexport const setStartTime = curry((model, v) => {\n  const imutableModel = Immutable(model);\n  return !!imutableModel && !!imutableModel.merge\n    ? imutableModel.merge({ startTime: v }, { deep: true })\n    : null;\n});\n\nexport const setIntervals = curry((model, v) => {\n  const imutableModel = Immutable(model);\n  return !!imutableModel && !!imutableModel.merge\n    ? imutableModel.merge({ intervals: v }, { deep: true })\n    : null;\n});\n// ===========================\n// PUBLIC INTERFACE\n// BOOLEAN \"gettters\"\nexport const isRecording = pipe(getStartTime, v => !!v);\nexport const toggleRecording = _toggleRecording;\nexport const totalTime = _totalTime;\n\nObject.assign(Recording, {\n  typeCheck,\n  getStartTime,\n  getIntervals,\n  setStartTime,\n  setIntervals,\n  isRecording,\n  toggleRecording,\n  totalTime,\n});\n\nexport default Recording;\n","/* eslint-disable new-cap */\nimport { propOr, curry, isNil } from 'ramda';\nimport { object, string, nullable } from './type-checkers';\nimport { immutableConstructor } from './utils';\nimport Recording from './Recording';\nimport Immutable from 'seamless-immutable';\n\n// ========================================================================\n//\n//     ALL GETTERS AND SETTERS (PUBLIC OR NOT) MUST BE IN THIS FILE\n//\n// ========================================================================\n\nexport const typeCheck = object({\n  name: string,\n  url: string,\n  recording: nullable(Recording.typeCheck),\n});\n\nconst Deliverable = immutableConstructor(typeCheck);\n\nexport const getRecording = deliverable => (\n  deliverable\n    ? deliverable.recording || Recording.of({})\n    : null\n);\n\nexport const getName = propOr(null, 'name');\nexport const getUrl = propOr(null, 'url');\n\n// Deliverable -> Recording -> Deliverable\nexport const setRecording = curry((model, newRecording) => (\n  isNil(model)\n    ? null\n    : Immutable(model).merge({ recording: newRecording }, { deep: true })\n));\n\nexport const isSame = curry((d1, d2) => getName(d1) === getName(d2));\n\nObject.assign(Deliverable, {\n  typeCheck,\n  getRecording,\n  getName,\n  getUrl,\n  setRecording,\n  isSame,\n});\nexport default Deliverable;\n","module.exports = function _arrayFromIterator(iter) {\n  var list = [];\n  var next;\n  while (!(next = iter.next()).done) {\n    list.push(next.value);\n  }\n  return list;\n};\n","module.exports = function _functionName(f) {\n  // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n  var match = String(f).match(/^function (\\w*)/);\n  return match == null ? '' : match[1];\n};\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns true if its arguments are identical, false otherwise. Values are\n * identical if they reference the same memory. `NaN` is identical to `NaN`;\n * `0` and `-0` are not identical.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      var o = {};\n *      R.identical(o, o); //=> true\n *      R.identical(1, 1); //=> true\n *      R.identical(1, '1'); //=> false\n *      R.identical([], []); //=> false\n *      R.identical(0, -0); //=> false\n *      R.identical(NaN, NaN); //=> true\n */\nmodule.exports = _curry2(function identical(a, b) {\n  // SameValue algorithm\n  if (a === b) { // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    return a !== 0 || 1 / a === 1 / b;\n  } else {\n    // Step 6.a: NaN == NaN\n    return a !== a && b !== b;\n  }\n});\n","var _has = require('./_has');\n\n\nmodule.exports = (function() {\n  var toString = Object.prototype.toString;\n  return toString.call(arguments) === '[object Arguments]' ?\n    function _isArguments(x) { return toString.call(x) === '[object Arguments]'; } :\n    function _isArguments(x) { return _has('callee', x); };\n}());\n","var _curry1 = require('./internal/_curry1');\nvar _has = require('./internal/_has');\nvar _isArguments = require('./internal/_isArguments');\n\n\n/**\n * Returns a list containing the names of all the enumerable own properties of\n * the supplied object.\n * Note that the order of the output array is not guaranteed to be consistent\n * across different JS platforms.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig {k: v} -> [k]\n * @param {Object} obj The object to extract properties from\n * @return {Array} An array of the object's own properties.\n * @example\n *\n *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n */\nmodule.exports = (function() {\n  // cover IE < 9 keys issues\n  var hasEnumBug = !({toString: null}).propertyIsEnumerable('toString');\n  var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString',\n                            'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\n  // Safari bug\n  var hasArgsEnumBug = (function() {\n    'use strict';\n    return arguments.propertyIsEnumerable('length');\n  }());\n\n  var contains = function contains(list, item) {\n    var idx = 0;\n    while (idx < list.length) {\n      if (list[idx] === item) {\n        return true;\n      }\n      idx += 1;\n    }\n    return false;\n  };\n\n  return typeof Object.keys === 'function' && !hasArgsEnumBug ?\n    _curry1(function keys(obj) {\n      return Object(obj) !== obj ? [] : Object.keys(obj);\n    }) :\n    _curry1(function keys(obj) {\n      if (Object(obj) !== obj) {\n        return [];\n      }\n      var prop, nIdx;\n      var ks = [];\n      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n      for (prop in obj) {\n        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n          ks[ks.length] = prop;\n        }\n      }\n      if (hasEnumBug) {\n        nIdx = nonEnumerableProps.length - 1;\n        while (nIdx >= 0) {\n          prop = nonEnumerableProps[nIdx];\n          if (_has(prop, obj) && !contains(ks, prop)) {\n            ks[ks.length] = prop;\n          }\n          nIdx -= 1;\n        }\n      }\n      return ks;\n    });\n}());\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * Gives a single-word string description of the (native) type of a value,\n * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n * attempt to distinguish user Object types any further, reporting them all as\n * 'Object'.\n *\n * @func\n * @memberOf R\n * @since v0.8.0\n * @category Type\n * @sig (* -> {*}) -> String\n * @param {*} val The value to test\n * @return {String}\n * @example\n *\n *      R.type({}); //=> \"Object\"\n *      R.type(1); //=> \"Number\"\n *      R.type(false); //=> \"Boolean\"\n *      R.type('s'); //=> \"String\"\n *      R.type(null); //=> \"Null\"\n *      R.type([]); //=> \"Array\"\n *      R.type(/[A-z]/); //=> \"RegExp\"\n */\nmodule.exports = _curry1(function type(val) {\n  return val === null      ? 'Null'      :\n         val === undefined ? 'Undefined' :\n         Object.prototype.toString.call(val).slice(8, -1);\n});\n","var _arrayFromIterator = require('./_arrayFromIterator');\nvar _functionName = require('./_functionName');\nvar _has = require('./_has');\nvar identical = require('../identical');\nvar keys = require('../keys');\nvar type = require('../type');\n\n\nmodule.exports = function _equals(a, b, stackA, stackB) {\n  if (identical(a, b)) {\n    return true;\n  }\n\n  if (type(a) !== type(b)) {\n    return false;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n    return typeof a.equals === 'function' && a.equals(b) &&\n           typeof b.equals === 'function' && b.equals(a);\n  }\n\n  switch (type(a)) {\n    case 'Arguments':\n    case 'Array':\n    case 'Object':\n      if (typeof a.constructor === 'function' &&\n          _functionName(a.constructor) === 'Promise') {\n        return a === b;\n      }\n      break;\n    case 'Boolean':\n    case 'Number':\n    case 'String':\n      if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n        return false;\n      }\n      break;\n    case 'Date':\n      if (!identical(a.valueOf(), b.valueOf())) {\n        return false;\n      }\n      break;\n    case 'Error':\n      return a.name === b.name && a.message === b.message;\n    case 'RegExp':\n      if (!(a.source === b.source &&\n            a.global === b.global &&\n            a.ignoreCase === b.ignoreCase &&\n            a.multiline === b.multiline &&\n            a.sticky === b.sticky &&\n            a.unicode === b.unicode)) {\n        return false;\n      }\n      break;\n    case 'Map':\n    case 'Set':\n      if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n        return false;\n      }\n      break;\n    case 'Int8Array':\n    case 'Uint8Array':\n    case 'Uint8ClampedArray':\n    case 'Int16Array':\n    case 'Uint16Array':\n    case 'Int32Array':\n    case 'Uint32Array':\n    case 'Float32Array':\n    case 'Float64Array':\n      break;\n    case 'ArrayBuffer':\n      break;\n    default:\n      // Values of other types are only equal if identical.\n      return false;\n  }\n\n  var keysA = keys(a);\n  if (keysA.length !== keys(b).length) {\n    return false;\n  }\n\n  var idx = stackA.length - 1;\n  while (idx >= 0) {\n    if (stackA[idx] === a) {\n      return stackB[idx] === b;\n    }\n    idx -= 1;\n  }\n\n  stackA.push(a);\n  stackB.push(b);\n  idx = keysA.length - 1;\n  while (idx >= 0) {\n    var key = keysA[idx];\n    if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n      return false;\n    }\n    idx -= 1;\n  }\n  stackA.pop();\n  stackB.pop();\n  return true;\n};\n","var _curry2 = require('./internal/_curry2');\nvar _equals = require('./internal/_equals');\n\n\n/**\n * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n * cyclical data structures.\n *\n * Dispatches symmetrically to the `equals` methods of both arguments, if\n * present.\n *\n * @func\n * @memberOf R\n * @since v0.15.0\n * @category Relation\n * @sig a -> b -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @example\n *\n *      R.equals(1, 1); //=> true\n *      R.equals(1, '1'); //=> false\n *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n *\n *      var a = {}; a.v = a;\n *      var b = {}; b.v = b;\n *      R.equals(a, b); //=> true\n */\nmodule.exports = _curry2(function equals(a, b) {\n  return _equals(a, b, [], []);\n});\n","var _curry3 = require('./internal/_curry3');\nvar equals = require('./equals');\n\n\n/**\n * Returns `true` if the specified object property is equal, in `R.equals`\n * terms, to the given value; `false` otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig String -> a -> Object -> Boolean\n * @param {String} name\n * @param {*} val\n * @param {*} obj\n * @return {Boolean}\n * @see R.equals, R.propSatisfies\n * @example\n *\n *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n *      var kids = [abby, fred, rusty, alois];\n *      var hasBrownHair = R.propEq('hair', 'brown');\n *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n */\nmodule.exports = _curry3(function propEq(name, val, obj) {\n  return equals(val, obj[name]);\n});\n","var _curry1 = require('./internal/_curry1');\n\n\n/**\n * A function that returns the `!` of its argument. It will return `true` when\n * passed false-y value, and `false` when passed a truth-y one.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Logic\n * @sig * -> Boolean\n * @param {*} a any value\n * @return {Boolean} the logical inverse of passed argument.\n * @see R.complement\n * @example\n *\n *      R.not(true); //=> false\n *      R.not(false); //=> true\n *      R.not(0); //=> true\n *      R.not(1); //=> false\n */\nmodule.exports = _curry1(function not(a) {\n  return !a;\n});\n","module.exports = function _isTransformer(obj) {\n  return typeof obj['@@transducer/step'] === 'function';\n};\n","var _isArray = require('./_isArray');\nvar _isTransformer = require('./_isTransformer');\nvar _slice = require('./_slice');\n\n\n/**\n * Returns a function that dispatches with different strategies based on the\n * object in list position (last argument). If it is an array, executes [fn].\n * Otherwise, if it has a function with [methodname], it will execute that\n * function (functor case). Otherwise, if it is a transformer, uses transducer\n * [xf] to return a new transformer (transducer case). Otherwise, it will\n * default to executing [fn].\n *\n * @private\n * @param {String} methodname property to check for a custom implementation\n * @param {Function} xf transducer to initialize if object is transformer\n * @param {Function} fn default ramda implementation\n * @return {Function} A function that dispatches on object in list position\n */\nmodule.exports = function _dispatchable(methodname, xf, fn) {\n  return function() {\n    var length = arguments.length;\n    if (length === 0) {\n      return fn();\n    }\n    var obj = arguments[length - 1];\n    if (!_isArray(obj)) {\n      var args = _slice(arguments, 0, length - 1);\n      if (typeof obj[methodname] === 'function') {\n        return obj[methodname].apply(obj, args);\n      }\n      if (_isTransformer(obj)) {\n        var transducer = xf.apply(null, args);\n        return transducer(obj);\n      }\n    }\n    return fn.apply(this, arguments);\n  };\n};\n","module.exports = function _filter(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  var result = [];\n\n  while (idx < len) {\n    if (fn(list[idx])) {\n      result[result.length] = list[idx];\n    }\n    idx += 1;\n  }\n  return result;\n};\n","module.exports = function _isObject(x) {\n  return Object.prototype.toString.call(x) === '[object Object]';\n};\n","module.exports = {\n  init: function() {\n    return this.xf['@@transducer/init']();\n  },\n  result: function(result) {\n    return this.xf['@@transducer/result'](result);\n  }\n};\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFilter(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XFilter.prototype['@@transducer/init'] = _xfBase.init;\n  XFilter.prototype['@@transducer/result'] = _xfBase.result;\n  XFilter.prototype['@@transducer/step'] = function(result, input) {\n    return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n  };\n\n  return _curry2(function _xfilter(f, xf) { return new XFilter(f, xf); });\n}());\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _filter = require('./internal/_filter');\nvar _isObject = require('./internal/_isObject');\nvar _reduce = require('./internal/_reduce');\nvar _xfilter = require('./internal/_xfilter');\nvar keys = require('./keys');\n\n\n/**\n * Takes a predicate and a \"filterable\", and returns a new filterable of the\n * same type containing the members of the given filterable which satisfy the\n * given predicate.\n *\n * Dispatches to the `filter` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.reject, R.transduce, R.addIndex\n * @example\n *\n *      var isEven = n => n % 2 === 0;\n *\n *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(_dispatchable('filter', _xfilter, function(pred, filterable) {\n  return (\n    _isObject(filterable) ?\n      _reduce(function(acc, key) {\n        if (pred(filterable[key])) {\n          acc[key] = filterable[key];\n        }\n        return acc;\n      }, {}, keys(filterable)) :\n    // else\n      _filter(pred, filterable)\n  );\n}));\n","/* eslint-disable new-cap */\nimport { string, object, array, nullable } from './type-checkers';\nimport Deliverable from './Deliverable';\nimport Maybe from './Maybe';\nimport { immutableConstructor } from './utils';\nimport { pipe, propOr, curry, propEq, filter, not } from 'ramda';\nimport Immutable from 'seamless-immutable';\n// ========================================================================\n//\n//     ALL GETTERS AND SETTERS (PUBLIC OR NOT) MUST BE IN THIS FILE\n//\n// ========================================================================\n\nexport const typeCheck = object({\n  name: string,\n  url: string,\n  unselectedDeliverables: array(Deliverable.typeCheck),\n  selectedDeliverable: nullable(Deliverable.typeCheck),\n});\n\n// unselectedDeliverables and selectedDeliverables together form a ziplist.\nconst Project = immutableConstructor(typeCheck);\n\n// GETTERS\nexport const getName = propOr(null, 'name');\nexport const getUrl = propOr(null, 'url');\nexport const getSelectedDeliverable = propOr(null, 'selectedDeliverable');\nexport const getDeliverables = model => (\n  getSelectedDeliverable(model)\n    ? [getSelectedDeliverable(model), ...propOr([], 'unselectedDeliverables', model)]\n    : propOr([], 'unselectedDeliverables', model)\n  );\n\nexport const setSelectedDeliverable = curry((model, newSelected) =>\n  Maybe.of(model)\n    .map(getDeliverables)\n    .map(filter(pipe(Deliverable.isSame(newSelected), not)))\n    .map(newDeliverables =>\n      Immutable(model).merge({\n        unselectedDeliverables: newDeliverables,\n        selectedDeliverable: newSelected || null,\n      })\n    )\n    .withDefault(model)\n);\n\nexport const updateDeliverable = curry((model, newDeliverable) => { // eslint-disable complexity\n  if (!model || !newDeliverable) {\n    return model;\n  }\n\n  const sameName = deliv => (\n      deliv\n      ? propEq('name', newDeliverable.name, deliv)\n      : false\n    );\n\n  if (sameName(Project.getSelectedDeliverable(model))) {\n    return Immutable(model).merge({\n      selectedDeliverable: newDeliverable,\n    });\n  } else if (model.unselectedDeliverables.find(sameName)) {\n    const newUnselected = model.unselectedDeliverables.map(\n      d => (sameName(d) ? newDeliverable : d)\n    );\n\n    return Immutable(model).merge({\n      unselectedDeliverables: newUnselected,\n    });\n  }\n  return model;\n});\n\nexport const isSame = curry((p1, p2) => getName(p1) === getName(p2));\n\n\n// NO SETTERS\nObject.assign(Project, {\n  typeCheck,\n  getName,\n  getUrl,\n  getDeliverables,\n  getSelectedDeliverable,\n  setSelectedDeliverable,\n  updateDeliverable,\n  isSame,\n});\n\nexport default Project;\n","import _Maybe from './Maybe';\nimport _RemoteData from './RemoteData';\nimport _Validation from './Validation';\nimport _typeCheckers from './type-checkers';\nimport _Recording from './Recording';\nimport _TimeInterval from './TimeInterval';\nimport _Deliverable from './Deliverable';\nimport _Project from './Project';\n\nexport const Maybe = _Maybe;\nexport const RemoteData = _RemoteData;\nexport const Validation = _Validation;\nexport const typeCheckers = _typeCheckers;\nexport const Recording = _Recording;\nexport const TimeInterval = _TimeInterval;\nexport const Deliverable = _Deliverable;\nexport const Project = _Project;\n","/* eslint-env jasmine */\n/* eslint-disable new-cap, no-underscore-dangle */\nimport {\n  Validation,\n} from '../../js/types';\n\ndescribe('Validation type', () => {\n  const successVal = 'success';\n  const successVal2 = 'success2';\n  const failureVal = 'failure';\n  const aSuccess = Validation.Success(successVal);\n  const aSuccess2 = Validation.Success(successVal2);\n  const aFailure = Validation.Failure(failureVal);\n\n  it('creates a success value with a truthy parameter', () => {\n    const a = Validation.Success(123);\n    expect(a.isSuccess).toBe(true);\n    expect(Validation.isSuccess(a)).toBe(true);\n  });\n\n  it('creates a failure with the Failure function even if the value is truthy', () => {\n    expect(Validation.Failure('a reason').isSuccess).toBe(false);\n  });\n\n  it('returns the default value when Failure with withDefalault', () => {\n    expect(Validation.Failure().withDefault('default')).toEqual('default');\n    expect(Validation.withDefault('default', Validation.Failure())).toEqual('default');\n  });\n\n  it('returns the main value when Success with withDefalault', () => {\n    expect(aSuccess.withDefault('error')).toEqual(successVal);\n    expect(Validation.withDefault('error', aSuccess)).toEqual(successVal);\n  });\n\n\n  it('maps successes and not failures', () => {\n    expect(aSuccess.map(_ => 'r')._value).toEqual('r');\n    expect(Validation.map(_ => 'r', aSuccess)._value).toEqual('r');\n    expect(Validation.map(_ => 'r')(aSuccess)._value).toEqual('r');\n\n    expect(aFailure.map(_ => 'r')._value).toEqual(failureVal);\n    expect(Validation.map(_ => 'r', aFailure)._value).toEqual(failureVal);\n    expect(Validation.map(_ => 'r')(aFailure)._value).toEqual(failureVal);\n  });\n\n  it('outputs a Validation type when mapping', () => {\n    expect(aSuccess.map(_ => 'r') instanceof Validation).toBe(true);\n    expect(Validation.map(_ => 'r', aSuccess) instanceof Validation).toBe(true);\n    expect(Validation.map(_ => 'r')(aSuccess) instanceof Validation).toBe(true);\n\n    expect(aFailure.map(_ => 'r') instanceof Validation).toBe(true);\n    expect(Validation.map(_ => 'r', aFailure) instanceof Validation).toBe(true);\n    expect(Validation.map(_ => 'r')(aFailure) instanceof Validation).toBe(true);\n  });\n\n  it('maps only successes with mapSuccess', () => {\n    expect(aSuccess.mapSuccess(_ => 'r')._value).toEqual('r');\n    expect(Validation.mapSuccess(_ => 'r', aSuccess)._value).toEqual('r');\n    expect(Validation.mapSuccess(_ => 'r')(aSuccess)._value).toEqual('r');\n\n    expect(aFailure.mapSuccess(_ => 'r')._value).toEqual(failureVal);\n    expect(Validation.mapSuccess(_ => 'r', aFailure)._value).toEqual(failureVal);\n    expect(Validation.mapSuccess(_ => 'r')(aFailure)._value).toEqual(failureVal);\n  });\n\n  it('maps only failures with mapFailure', () => {\n    expect(aSuccess.mapFailure(_ => 'r')._value).toEqual(successVal);\n    expect(Validation.mapFailure(_ => 'r', aSuccess)._value).toEqual(successVal);\n    expect(Validation.mapFailure(_ => 'r')(aSuccess)._value).toEqual(successVal);\n\n    expect(aFailure.mapFailure(_ => 'r')._value).toEqual('r');\n    expect(Validation.mapFailure(_ => 'r', aFailure)._value).toEqual('r');\n    expect(Validation.mapFailure(_ => 'r')(aFailure)._value).toEqual('r');\n  });\n\n  it('throws with throwFailure when Failure and doesn\\'t when Success', () => {\n    expect(_ => aFailure.throwFailure()).toThrow();\n    expect(_ => Validation.throwFailure(aFailure)).toThrow();\n\n    expect(_ => aSuccess.throwFailure()).not.toThrow();\n    expect(_ => Validation.throwFailure(aSuccess)).not.toThrow();\n  });\n\n  it('calls the callback with andThen only when Success', () => {\n    expect(aSuccess.andThen(_ => aSuccess2)).toEqual(aSuccess2);\n    expect(Validation.andThen(_ => aSuccess2, aSuccess)).toEqual(aSuccess2);\n    expect(Validation.andThen(_ => aSuccess2)(aSuccess)).toEqual(aSuccess2);\n\n    expect(aFailure.andThen(_ => 'r')).toEqual(aFailure);\n    expect(Validation.andThen(_ => 'r', aFailure)).toEqual(aFailure);\n    expect(Validation.andThen(_ => 'r')(aFailure)).toEqual(aFailure);\n  });\n\n  it('throws when andThen callback does not return a validation', () => {\n    expect(_ => aSuccess.andThen(_ => 'r')).toThrow();\n    expect(_ => Validation.andThen(_ => 'r', aSuccess)).toThrow();\n    expect(_ => Validation.andThen(_ => 'r')(aSuccess)).toThrow();\n  });\n\n  it('chains only successes', () => {\n    const success1 = Validation.Success('1');\n    const success2 = Validation.Success('2');\n\n    expect(success1.chain(success2)._value).toEqual('2');\n    expect(Validation.chain(success1, success2)._value).toEqual('2');\n    expect(Validation.chain(success1)(success2)._value).toEqual('2');\n\n    expect(aFailure.chain(success2)._value).toEqual(failureVal);\n    expect(Validation.chain(aFailure, success2)._value).toEqual(failureVal);\n    expect(Validation.chain(aFailure)(success2)._value).toEqual(failureVal);\n  });\n});\n","/* eslint-env jasmine */\n/* eslint-disable new-cap, no-underscore-dangle */\nimport { pipe } from 'ramda';\nimport {\n  Deliverable,\n  Recording,\n  Validation,\n} from '../../js/types';\n\ndescribe('Deliverable type', () => {\n  const delivName = 'name';\n  const delivUrl = 'url';\n  const delivRec = Recording.of({ startTime: null, intervals: [] });\n  const validObject = { name: delivName, url: delivUrl, recording: delivRec };\n  const validDeliv = Deliverable.of(validObject);\n  const validObjectNoRec = { name: delivName, url: delivUrl, recording: null };\n  const validDelivNoRec = Deliverable.of(validObjectNoRec);\n\n  it('type checks correctly', () => {\n    const invalid1 = { name: 'asfd', url: 'adsf', recording: 'asdfa' };\n    const invalid2 = { name: null, url: 'adsf', recording: null };\n    const invalid3 = { name: 'asdf', url: null, recording: null };\n\n    expect(Validation.isSuccess(Deliverable.typeCheck(invalid1))).toEqual(false);\n    expect(Validation.isSuccess(Deliverable.typeCheck(invalid2))).toEqual(false);\n    expect(Validation.isSuccess(Deliverable.typeCheck(invalid3))).toEqual(false);\n    expect(Validation.isSuccess(Deliverable.typeCheck(validObject))).toEqual(true);\n    expect(Validation.isSuccess(Deliverable.typeCheck(validObjectNoRec))).toEqual(true);\n  });\n\n  it('retuns a recording even if the Deliverable doesn\\'t have one yet', () => {\n    expect(\n      pipe(\n        Deliverable.getRecording,\n        Recording.typeCheck,\n        Validation.isSuccess\n      )({})\n    ).toEqual(true);\n    expect(Deliverable.getRecording(null)).toEqual(null);\n    expect(Deliverable.getRecording(undefined)).toEqual(null);\n    expect(Deliverable.getRecording({ recording: delivRec })).toEqual(delivRec);\n  });\n\n  it('returns name and doesn\\'t throw with null', () => {\n    expect(Deliverable.getName(validDeliv)).toEqual(delivName);\n    expect(_ => Deliverable.getName(null)).not.toThrow();\n  });\n\n  it('returns url and doesn\\'t throw with null', () => {\n    expect(Deliverable.getUrl(validDeliv)).toEqual(delivUrl);\n    expect(_ => Deliverable.getUrl(null)).not.toThrow();\n  });\n\n  it('returns an object with the correct recording when using setRecording', () => {\n    const setAndGetRecording = pipe(Deliverable.setRecording, Deliverable.getRecording);\n\n    expect(setAndGetRecording(validDelivNoRec, delivRec)).toEqual(delivRec);\n    expect(setAndGetRecording(null, validDeliv)).toEqual(null);\n    expect(_ => setAndGetRecording(null, null)).not.toThrow();\n  });\n});\n","/* eslint-env jasmine */\n/* eslint-disable new-cap, no-underscore-dangle */\nimport { pipe } from 'ramda';\nimport {\n  Recording,\n  Validation,\n  TimeInterval,\n} from '../../js/types';\n\n\ndescribe('Recording type', () => {\n  const now = Date.now();\n\n  const secInterval5 = TimeInterval.of({\n    start: new Date(now - 100 * 1000),\n    end: new Date(now - 95 * 1000),\n  });\n  const secInterval10 = TimeInterval.of({\n    start: new Date(now - 200 * 1000),\n    end: new Date(now - 190 * 1000),\n  });\n\n  const valid1 = { startTime: null, intervals: [] };\n  const valid1Running = { startTime: new Date(), intervals: [] };\n  const valid2 = { startTime: null, intervals: [\n    secInterval5,\n    secInterval10,\n  ] };\n  const valid2Running = { startTime: new Date(), intervals: [\n    secInterval5,\n    secInterval10,\n  ] };\n\n  it('type checks correctly', () => {\n    const invalid1 = {};\n    const invalid1Running = { startTime: 'adsf', intervals: [] };\n    const invalid2 = { startTime: 'adsf', intervals: null };\n    const validates = pipe(Recording.typeCheck, Validation.isSuccess);\n\n    expect(validates(invalid1)).toBe(false);\n    expect(validates(invalid1Running)).toBe(false);\n    expect(validates(invalid2)).toBe(false);\n\n    expect(validates(valid1)).toBe(true);\n    expect(validates(valid1Running)).toBe(true);\n    expect(validates(valid2)).toBe(true);\n    expect(validates(valid2Running)).toBe(true);\n  });\n\n  it('returns the startTime and does not break with null', () => {\n    const date = new Date();\n    expect(Recording.getStartTime({ startTime: date })).toEqual(date);\n    expect(Recording.getStartTime({ startTime: null })).toEqual(null);\n    expect(Recording.getStartTime({})).toEqual(null);\n    expect(_ => Recording.getStartTime(null)).not.toThrow();\n  });\n\n  it('always returns an array for getIntervals', () => {\n    const intervals = [secInterval10, secInterval5];\n    const intervalIsArray = pipe(Recording.getIntervals, v => Array.isArray(v));\n\n    expect(intervalIsArray({ intervals })).toEqual(true);\n    expect(intervalIsArray({ intervals: null })).toEqual(true);\n    expect(intervalIsArray({})).toEqual(true);\n    expect(intervalIsArray(null)).toEqual(true);\n    expect(_ => Recording.getIntervals(null)).not.toThrow();\n  });\n\n  it('sets the interval without throwing with null', () => {\n    expect(_ => Recording.setIntervals(null, null)).not.toThrow();\n    expect(_ => Recording.setIntervals(null, [])).not.toThrow();\n    expect(_ => Recording.setIntervals({ intervals: [] }, null)).not.toThrow();\n    expect(_ => Recording.setIntervals({ intervals: [] }, undefined)).not.toThrow();\n    expect(_ => Recording.setIntervals({ intervals: [] }, 'asfadsf')).not.toThrow();\n    expect(_ => Recording.setIntervals('asasdf', 'asfadsf')).not.toThrow();\n    expect(_ => Recording.setIntervals('asasdf', [])).not.toThrow();\n  });\n\n  it('setIntervals works', () => {\n    const empty = [];\n    const intervals = [secInterval10, secInterval5];\n    const setAndGetIntervals = pipe(Recording.setIntervals, Recording.getIntervals);\n    expect(setAndGetIntervals({ intervals: [] }, intervals)).toEqual(intervals);\n    expect(setAndGetIntervals({ intervals }, empty)).toEqual(empty);\n    expect(setAndGetIntervals({}, empty)).toEqual(empty);\n  });\n\n  it('says whether isRecording or not', () => {\n    expect(Recording.isRecording(valid1Running)).toEqual(true);\n    expect(Recording.isRecording(valid2)).toEqual(false);\n    expect(_ => Recording.isRecording(null)).not.toThrow();\n  });\n\n  it('sets the correct startTime in toggleRecording', () => {\n    const toggledValue = pipe(Recording.toggleRecording, Recording.isRecording);\n    const toggledStartTime = pipe(Recording.toggleRecording, Recording.getStartTime);\n    expect(toggledValue(valid1Running)).toEqual(false);\n    expect(toggledValue(valid1)).toEqual(true);\n    expect(toggledValue(null)).toEqual(false);\n    expect(toggledStartTime(valid1Running)).toBe(null);\n    expect(toggledStartTime(valid2).valueOf()).toBeLessThanOrEqual(new Date().valueOf());\n  });\n\n  it('calculates the total time correctly', () => {\n    const sec15 = { startTime: null, intervals: [secInterval10, secInterval5] };\n    const sec15Running = { startTime: new Date(), intervals: [secInterval10, secInterval5] };\n    const sec0 = { startTime: null, intervals: [] };\n    const sec0Running = { startTime: new Date(), intervals: [] };\n\n    expect(Recording.totalTime(sec15)).toEqual(1000 * 15);\n    expect(Recording.totalTime(sec0)).toEqual(0);\n    expect(Recording.totalTime(sec15Running)).toBeGreaterThan(100 * 15);\n    expect(Recording.totalTime(sec0Running)).toBeGreaterThan(0);\n  });\n\n  it('does not break when totalTime receives null and always returns a number', () => {\n    expect(_ => Recording.totalTime(null)).not.toThrow();\n    expect(Recording.totalTime(null)).toEqual(0);\n    expect(Recording.totalTime()).toEqual(0);\n    expect(Recording.totalTime({})).toEqual(0);\n    expect(Recording.totalTime([])).toEqual(0);\n  });\n});\n","/* eslint-disable new-cap */\n/* eslint-env jasmine */\n\nimport { pipe } from 'ramda';\nimport { Maybe } from '../../js/types';\n\n\ndescribe('Maybe type', () => {\n  const createdJustWithOf = pipe(Maybe.of, Maybe.isJust);\n  const createdJust = pipe(Maybe.Just, Maybe.isJust);\n  const createdNothing = pipe(Maybe.Nothing, Maybe.isNothing);\n  const defaultVal = 'default';\n  const justVal = 'asfd';\n\n  it('creates a Just when passed truthy and falsy non-null values', () => {\n    expect(createdJust('1')).toBe(true);\n    expect(createdJust({})).toBe(true);\n    expect(createdJust(true)).toBe(true);\n    expect(createdJust(false)).toBe(true);\n    expect(createdJust([])).toBe(true);\n  });\n\n  it('creates a Nothing when passed anything with the Nothing constructor', () => {\n    expect(createdNothing('1')).toBe(true);\n    expect(createdNothing({})).toBe(true);\n    expect(createdNothing(true)).toBe(true);\n    expect(createdNothing(false)).toBe(true);\n    expect(createdNothing([])).toBe(true);\n    expect(createdNothing(null)).toBe(true);\n    expect(createdNothing()).toBe(true);\n  });\n\n  it('creates a Nothing if null or undefined is passed to the general constructor', () => {\n    expect(createdJustWithOf(null)).toBe(false);\n    expect(createdJustWithOf()).toBe(false);\n  });\n\n  it('creates a Just if something is passed to the general constructor', () => {\n    expect(createdJustWithOf('1')).toBe(true);\n    expect(createdJustWithOf({})).toBe(true);\n    expect(createdJustWithOf(true)).toBe(true);\n    expect(createdJustWithOf(false)).toBe(true);\n    expect(createdJustWithOf([])).toBe(true);\n  });\n\n  it('Retuns default only to Nothing values', () => {\n    expect(Maybe.withDefault(defaultVal, Maybe.Just(justVal))).toEqual(justVal);\n    expect(Maybe.withDefault(defaultVal, Maybe.Nothing(justVal))).toEqual(defaultVal);\n  });\n\n  it('maps Just only values', () => {\n    const mappedVal = 'mapped';\n    const func = _ => mappedVal;\n    const mapAndGetDefault = pipe(Maybe.map(func), Maybe.withDefault(defaultVal));\n    expect(mapAndGetDefault(Maybe.Just(justVal))).toEqual(mappedVal);\n    expect(mapAndGetDefault(Maybe.Nothing(justVal))).toEqual(defaultVal);\n  });\n\n  it('doesn\\' does not continue mapping when a null value appears', () => {\n    expect(\n      Maybe.of(justVal)\n      .map(_ => null)\n      .map(_ => justVal)\n      .withDefault(defaultVal)\n    ).toEqual(defaultVal);\n  });\n\n  it('maps only two Justs in map2', () => {\n    const mappedVal = 'mapped';\n    const func = _ => mappedVal;\n    const map2AndGetDefault = pipe(Maybe.map2(func), Maybe.withDefault(defaultVal));\n    expect(map2AndGetDefault(Maybe.Just(justVal), Maybe.Just(justVal))).toEqual(mappedVal);\n    expect(map2AndGetDefault(Maybe.Just(justVal), Maybe.Nothing(justVal))).toEqual(defaultVal);\n    expect(map2AndGetDefault(Maybe.Nothing(justVal), Maybe.Just(justVal))).toEqual(defaultVal);\n    expect(map2AndGetDefault(Maybe.Nothing(justVal), Maybe.Nothing(justVal))).toEqual(defaultVal);\n  });\n\n  it('has curried maps', () => {\n    const mappedVal = 'mapped';\n    expect(\n      Maybe.withDefault(\n        defaultVal,\n        Maybe.map(_ => mappedVal)(Maybe.Just('j'))\n      )\n    ).toEqual(mappedVal);\n  });\n});\n","/* eslint-env jasmine */\n/* eslint-disable new-cap, no-underscore-dangle */\nimport { pipe } from 'ramda';\nimport {\n  Validation,\n  TimeInterval,\n} from '../../js/types';\n\ndescribe('TimeInterval type', () => {\n  const now = Date.now();\n  const validObj = { start: new Date(now), end: new Date(now + 5 * 1000) };\n\n  it('checks for types correctly', () => {\n    const invalid1 = {};\n    const invalid2 = { start: new Date() };\n    const invalid3 = { start: new Date(), end: '' };\n    const invalid4 = { start: new Date, end: 123 };\n    const invalid5 = { end: new Date };\n\n    const validates = pipe(TimeInterval.typeCheck, Validation.isSuccess);\n    expect(validates(invalid1)).toEqual(false);\n    expect(validates(invalid2)).toEqual(false);\n    expect(validates(invalid3)).toEqual(false);\n    expect(validates(invalid4)).toEqual(false);\n    expect(validates(invalid5)).toEqual(false);\n  });\n\n  it('returns start date without breaking with null', () => {\n    expect(TimeInterval.getStart(validObj)).toEqual(validObj.start);\n    expect(TimeInterval.getStart({})).toEqual(null);\n    expect(TimeInterval.getStart(null)).toEqual(null);\n    expect(TimeInterval.getStart(undefined)).toEqual(null);\n  });\n\n  it('returns end date without breaking with null', () => {\n    expect(TimeInterval.getEnd(validObj)).toEqual(validObj.end);\n    expect(TimeInterval.getEnd({})).toEqual(null);\n    expect(TimeInterval.getEnd(null)).toEqual(null);\n    expect(TimeInterval.getEnd(undefined)).toEqual(null);\n  });\n\n  it('calculates the date difference correctly', () => {\n    expect(TimeInterval.getValue(validObj)).toEqual(5 * 1000);\n  });\n\n  it('returns null if an invalid TimeInterval object is provided in getValue', () => {\n    expect(_ => TimeInterval.getValue(null)).not.toThrow();\n    expect(TimeInterval.getValue(null)).toEqual(null);\n    expect(TimeInterval.getValue(undefined)).toEqual(null);\n    expect(TimeInterval.getValue({})).toEqual(null);\n    expect(TimeInterval.getValue([])).toEqual(null);\n  });\n});\n","/* eslint-env jasmine */\n/* eslint-disable new-cap, no-underscore-dangle */\nimport { pipe } from 'ramda';\nimport {\n  Project,\n  Recording,\n  Validation,\n} from '../../js/types';\nimport Immutable from 'seamless-immutable';\n\ndescribe('Project type', () => {\n  const delivRec = Recording.of({ startTime: null, intervals: [] });\n  const mockDeliverable = { name: 'aaa', url: 'www', recording: delivRec };\n  const validName = 'name';\n  const validUrl = 'url';\n  const unselectedDeliverables = [mockDeliverable];\n  const valid = {\n    name: validName,\n    url: validUrl,\n    unselectedDeliverables,\n    selectedDeliverable: mockDeliverable,\n  };\n  const isValid = pipe(\n    v => Immutable(v).asMutable({ deep: true }),\n    Project.typeCheck,\n    Validation.isSuccess\n  );\n\n\n  it('typeChecks ok', () => {\n    const invalid1 = {\n      name: validName,\n      url: validUrl,\n      unselectedDeliverables: null,\n      selectedDeliverable: null,\n    };\n    const invalid2 = {\n      name: validName,\n      url: validUrl,\n      unselectedDeliverables: [],\n      selectedDeliverable: [],\n    };\n    const invalid3 = {};\n\n    expect(isValid(invalid1)).toEqual(false);\n    expect(isValid(invalid2)).toEqual(false);\n    expect(isValid(invalid3)).toEqual(false);\n    expect(isValid(valid)).toEqual(true);\n  });\n\n  it('returns name without breaking with null', () => {\n    const getName = pipe(Project.of, Project.getName);\n    expect(getName(valid)).toEqual(validName);\n    expect(getName({})).toEqual(null);\n    expect(getName()).toEqual(null);\n    expect(getName(null)).toEqual(null);\n  });\n\n  it('returns url without breaking with null', () => {\n    const getUrl = pipe(Project.of, Project.getUrl);\n    expect(getUrl(valid)).toEqual(validUrl);\n    expect(getUrl({})).toEqual(null);\n    expect(getUrl()).toEqual(null);\n    expect(getUrl(null)).toEqual(null);\n  });\n\n  it('returns deliverables without breaking with null', () => {\n    const getDeliverables = pipe(Project.of, Project.getDeliverables);\n    expect(getDeliverables(valid).find(m => m.url === mockDeliverable.url)).toBeTruthy();\n    expect(getDeliverables({})).toEqual([]);\n    expect(getDeliverables()).toEqual([]);\n    expect(getDeliverables(null)).toEqual([]);\n  });\n\n  it('returns selectedDeliverable without breaking with null', () => {\n    const getSelectedDeliverable = pipe(Project.of, Project.getSelectedDeliverable);\n    expect(getSelectedDeliverable(valid)).toEqual(mockDeliverable);\n    expect(getSelectedDeliverable({})).toEqual(null);\n    expect(getSelectedDeliverable()).toEqual(null);\n    expect(getSelectedDeliverable(null)).toEqual(null);\n  });\n\n  it('updates a deliverable that is selected', () => {\n    const mockDeliverableChanged = Object.assign({}, mockDeliverable, { url: 'jjj' });\n    const mockProject = {\n      name: 'asfd',\n      url: 'asdf',\n      unselectedDeliverables: [],\n      selectedDeliverable: mockDeliverable,\n    };\n\n    const updateAndGetDeliverables = pipe(\n      Project.updateDeliverable,\n      Project.getDeliverables,\n    );\n\n    expect(\n      updateAndGetDeliverables(mockProject, mockDeliverableChanged)\n        .find(m => m.url === mockDeliverableChanged.url)\n    ).toBeTruthy();\n    expect(\n      updateAndGetDeliverables(mockProject, mockDeliverableChanged)\n        .find(m => m.url === mockDeliverable.url)\n    ).toBeFalsy();\n\n    expect(pipe(\n        Project.updateDeliverable,\n        isValid\n      )(mockProject, mockDeliverableChanged)\n    ).toEqual(true);\n  });\n\n  it('updates a deliverable that is not selected', () => {\n    const mockDeliverableChanged = Object.assign({}, mockDeliverable, { url: 'jjj' });\n    const mockProject = {\n      name: 'asfd',\n      url: 'asdf',\n      unselectedDeliverables: [mockDeliverable],\n      selectedDeliverable: null,\n    };\n\n    const updateAndGetDeliverables = pipe(\n      Project.updateDeliverable,\n      Project.getDeliverables,\n    );\n\n    expect(\n      updateAndGetDeliverables(mockProject, mockDeliverableChanged)\n        .find(m => m.url === mockDeliverableChanged.url)\n    ).toBeTruthy();\n    expect(\n      updateAndGetDeliverables(mockProject, mockDeliverableChanged)\n        .find(m => m.url === mockDeliverable.url)\n    ).toBeFalsy();\n\n    expect(pipe(\n        Project.updateDeliverable,\n        isValid\n      )(mockProject, mockDeliverableChanged)\n    ).toEqual(true);\n  });\n\n  it('handles nulls when updating deliverables', () => {\n    expect(_ => Project.updateDeliverable(null, null)).not.toThrow();\n    expect(_ => Project.updateDeliverable(valid, null)).not.toThrow();\n    expect(_ => Project.updateDeliverable(valid, valid)).not.toThrow();\n  });\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns a function that when supplied an object returns the indicated\n * property of that object, if it exists.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Object\n * @sig s -> {s: a} -> a | Undefined\n * @param {String} p The property name\n * @param {Object} obj The object to query\n * @return {*} The value at `obj.p`.\n * @see R.path\n * @example\n *\n *      R.prop('x', {x: 100}); //=> 100\n *      R.prop('x', {}); //=> undefined\n */\nmodule.exports = _curry2(function prop(p, obj) { return obj[p]; });\n","module.exports = function _reduced(x) {\n  return x && x['@@transducer/reduced'] ? x :\n    {\n      '@@transducer/value': x,\n      '@@transducer/reduced': true\n    };\n};\n","var _curry2 = require('./_curry2');\nvar _reduced = require('./_reduced');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XFind(f, xf) {\n    this.xf = xf;\n    this.f = f;\n    this.found = false;\n  }\n  XFind.prototype['@@transducer/init'] = _xfBase.init;\n  XFind.prototype['@@transducer/result'] = function(result) {\n    if (!this.found) {\n      result = this.xf['@@transducer/step'](result, void 0);\n    }\n    return this.xf['@@transducer/result'](result);\n  };\n  XFind.prototype['@@transducer/step'] = function(result, input) {\n    if (this.f(input)) {\n      this.found = true;\n      result = _reduced(this.xf['@@transducer/step'](result, input));\n    }\n    return result;\n  };\n\n  return _curry2(function _xfind(f, xf) { return new XFind(f, xf); });\n}());\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _xfind = require('./internal/_xfind');\n\n\n/**\n * Returns the first element of the list which matches the predicate, or\n * `undefined` if no element matches.\n *\n * Dispatches to the `find` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig (a -> Boolean) -> [a] -> a | undefined\n * @param {Function} fn The predicate function used to determine if the element is the\n *        desired one.\n * @param {Array} list The array to consider.\n * @return {Object} The element found, or `undefined`.\n * @see R.transduce\n * @example\n *\n *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n *      R.find(R.propEq('a', 4))(xs); //=> undefined\n */\nmodule.exports = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n  var idx = 0;\n  var len = list.length;\n  while (idx < len) {\n    if (fn(list[idx])) {\n      return list[idx];\n    }\n    idx += 1;\n  }\n}));\n","var _curry2 = require('./internal/_curry2');\nvar _isString = require('./internal/_isString');\n\n\n/**\n * Returns the nth element of the given list or string. If n is negative the\n * element at index length + n is returned.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Number -> [a] -> a | Undefined\n * @sig Number -> String -> String\n * @param {Number} offset\n * @param {*} list\n * @return {*}\n * @example\n *\n *      var list = ['foo', 'bar', 'baz', 'quux'];\n *      R.nth(1, list); //=> 'bar'\n *      R.nth(-1, list); //=> 'quux'\n *      R.nth(-99, list); //=> undefined\n *\n *      R.nth(2, 'abc'); //=> 'c'\n *      R.nth(3, 'abc'); //=> ''\n */\nmodule.exports = _curry2(function nth(offset, list) {\n  var idx = offset < 0 ? list.length + offset : offset;\n  return _isString(list) ? list.charAt(idx) : list[idx];\n});\n","var nth = require('./nth');\n\n\n/**\n * Returns the first element of the given list or string. In some libraries\n * this function is named `first`.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> a | Undefined\n * @sig String -> String\n * @param {Array|String} list\n * @return {*}\n * @see R.tail, R.init, R.last\n * @example\n *\n *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n *      R.head([]); //=> undefined\n *\n *      R.head('abc'); //=> 'a'\n *      R.head(''); //=> ''\n */\nmodule.exports = nth(0);\n","module.exports = function _isFunction(x) {\n  return Object.prototype.toString.call(x) === '[object Function]';\n};\n","var equals = require('../equals');\n\n\nmodule.exports = function _indexOf(list, a, idx) {\n  var inf, item;\n  // Array.prototype.indexOf doesn't exist below IE9\n  if (typeof list.indexOf === 'function') {\n    switch (typeof a) {\n      case 'number':\n        if (a === 0) {\n          // manually crawl the list to distinguish between +0 and -0\n          inf = 1 / a;\n          while (idx < list.length) {\n            item = list[idx];\n            if (item === 0 && 1 / item === inf) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        } else if (a !== a) {\n          // NaN\n          while (idx < list.length) {\n            item = list[idx];\n            if (typeof item === 'number' && item !== item) {\n              return idx;\n            }\n            idx += 1;\n          }\n          return -1;\n        }\n        // non-zero numbers can utilise Set\n        return list.indexOf(a, idx);\n\n      // all these types can utilise Set\n      case 'string':\n      case 'boolean':\n      case 'function':\n      case 'undefined':\n        return list.indexOf(a, idx);\n\n      case 'object':\n        if (a === null) {\n          // null can utilise Set\n          return list.indexOf(a, idx);\n        }\n    }\n  }\n  // anything else not covered above, defer to R.equals\n  while (idx < list.length) {\n    if (equals(list[idx], a)) {\n      return idx;\n    }\n    idx += 1;\n  }\n  return -1;\n};\n","var _indexOf = require('./_indexOf');\n\n\nmodule.exports = function _contains(a, list) {\n  return _indexOf(list, a, 0) >= 0;\n};\n","module.exports = function _map(fn, functor) {\n  var idx = 0;\n  var len = functor.length;\n  var result = Array(len);\n  while (idx < len) {\n    result[idx] = fn(functor[idx]);\n    idx += 1;\n  }\n  return result;\n};\n","module.exports = function _quote(s) {\n  var escaped = s\n    .replace(/\\\\/g, '\\\\\\\\')\n    .replace(/[\\b]/g, '\\\\b')  // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f')\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(/\\t/g, '\\\\t')\n    .replace(/\\v/g, '\\\\v')\n    .replace(/\\0/g, '\\\\0');\n\n  return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n};\n","/**\n * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n */\nmodule.exports = (function() {\n  var pad = function pad(n) { return (n < 10 ? '0' : '') + n; };\n\n  return typeof Date.prototype.toISOString === 'function' ?\n    function _toISOString(d) {\n      return d.toISOString();\n    } :\n    function _toISOString(d) {\n      return (\n        d.getUTCFullYear() + '-' +\n        pad(d.getUTCMonth() + 1) + '-' +\n        pad(d.getUTCDate()) + 'T' +\n        pad(d.getUTCHours()) + ':' +\n        pad(d.getUTCMinutes()) + ':' +\n        pad(d.getUTCSeconds()) + '.' +\n        (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z'\n      );\n    };\n}());\n","module.exports = function _complement(f) {\n  return function() {\n    return !f.apply(this, arguments);\n  };\n};\n","var _complement = require('./internal/_complement');\nvar _curry2 = require('./internal/_curry2');\nvar filter = require('./filter');\n\n\n/**\n * The complement of `filter`.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Filterable f => (a -> Boolean) -> f a -> f a\n * @param {Function} pred\n * @param {Array} filterable\n * @return {Array}\n * @see R.filter, R.transduce, R.addIndex\n * @example\n *\n *      var isOdd = (n) => n % 2 === 1;\n *\n *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n *\n *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n */\nmodule.exports = _curry2(function reject(pred, filterable) {\n  return filter(_complement(pred), filterable);\n});\n","var _contains = require('./_contains');\nvar _map = require('./_map');\nvar _quote = require('./_quote');\nvar _toISOString = require('./_toISOString');\nvar keys = require('../keys');\nvar reject = require('../reject');\n\n\nmodule.exports = function _toString(x, seen) {\n  var recur = function recur(y) {\n    var xs = seen.concat([x]);\n    return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n  };\n\n  //  mapPairs :: (Object, [String]) -> [String]\n  var mapPairs = function(obj, keys) {\n    return _map(function(k) { return _quote(k) + ': ' + recur(obj[k]); }, keys.slice().sort());\n  };\n\n  switch (Object.prototype.toString.call(x)) {\n    case '[object Arguments]':\n      return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n    case '[object Array]':\n      return '[' + _map(recur, x).concat(mapPairs(x, reject(function(k) { return /^\\d+$/.test(k); }, keys(x)))).join(', ') + ']';\n    case '[object Boolean]':\n      return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n    case '[object Date]':\n      return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n    case '[object Null]':\n      return 'null';\n    case '[object Number]':\n      return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n    case '[object String]':\n      return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n    case '[object Undefined]':\n      return 'undefined';\n    default:\n      if (typeof x.toString === 'function') {\n        var repr = x.toString();\n        if (repr !== '[object Object]') {\n          return repr;\n        }\n      }\n      return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n  }\n};\n","var _curry1 = require('./internal/_curry1');\nvar _toString = require('./internal/_toString');\n\n\n/**\n * Returns the string representation of the given value. `eval`'ing the output\n * should result in a value equivalent to the input value. Many of the built-in\n * `toString` methods do not satisfy this requirement.\n *\n * If the given value is an `[object Object]` with a `toString` method other\n * than `Object.prototype.toString`, this method is invoked with no arguments\n * to produce the return value. This means user-defined constructor functions\n * can provide a suitable `toString` method. For example:\n *\n *     function Point(x, y) {\n *       this.x = x;\n *       this.y = y;\n *     }\n *\n *     Point.prototype.toString = function() {\n *       return 'new Point(' + this.x + ', ' + this.y + ')';\n *     };\n *\n *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n *\n * @func\n * @memberOf R\n * @since v0.14.0\n * @category String\n * @sig * -> String\n * @param {*} val\n * @return {String}\n * @example\n *\n *      R.toString(42); //=> '42'\n *      R.toString('abc'); //=> '\"abc\"'\n *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n */\nmodule.exports = _curry1(function toString(val) { return _toString(val, []); });\n","var _curry2 = require('./internal/_curry2');\nvar _isArray = require('./internal/_isArray');\nvar _isFunction = require('./internal/_isFunction');\nvar toString = require('./toString');\n\n\n/**\n * Returns the result of concatenating the given lists or strings.\n *\n * Note: `R.concat` expects both arguments to be of the same type,\n * unlike the native `Array.prototype.concat` method. It will throw\n * an error if you `concat` an Array with a non-Array value.\n *\n * Dispatches to the `concat` method of the first argument, if present.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig [a] -> [a] -> [a]\n * @sig String -> String -> String\n * @param {Array|String} a\n * @param {Array|String} b\n * @return {Array|String}\n *\n * @example\n *\n *      R.concat([], []); //=> []\n *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n */\nmodule.exports = _curry2(function concat(a, b) {\n  if (a == null || !_isFunction(a.concat)) {\n    throw new TypeError(toString(a) + ' does not have a method named \"concat\"');\n  }\n  if (_isArray(a) && !_isArray(b)) {\n    throw new TypeError(toString(b) + ' is not an array');\n  }\n  return a.concat(b);\n});\n","var _curry2 = require('./_curry2');\nvar _xfBase = require('./_xfBase');\n\n\nmodule.exports = (function() {\n  function XMap(f, xf) {\n    this.xf = xf;\n    this.f = f;\n  }\n  XMap.prototype['@@transducer/init'] = _xfBase.init;\n  XMap.prototype['@@transducer/result'] = _xfBase.result;\n  XMap.prototype['@@transducer/step'] = function(result, input) {\n    return this.xf['@@transducer/step'](result, this.f(input));\n  };\n\n  return _curry2(function _xmap(f, xf) { return new XMap(f, xf); });\n}());\n","var _curry2 = require('./internal/_curry2');\nvar _dispatchable = require('./internal/_dispatchable');\nvar _map = require('./internal/_map');\nvar _reduce = require('./internal/_reduce');\nvar _xmap = require('./internal/_xmap');\nvar curryN = require('./curryN');\nvar keys = require('./keys');\n\n\n/**\n * Takes a function and\n * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n * applies the function to each of the functor's values, and returns\n * a functor of the same shape.\n *\n * Ramda provides suitable `map` implementations for `Array` and `Object`,\n * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n *\n * Dispatches to the `map` method of the second argument, if present.\n *\n * Acts as a transducer if a transformer is given in list position.\n *\n * Also treats functions as functors and will compose them together.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category List\n * @sig Functor f => (a -> b) -> f a -> f b\n * @param {Function} fn The function to be called on every element of the input `list`.\n * @param {Array} list The list to be iterated over.\n * @return {Array} The new list.\n * @see R.transduce, R.addIndex\n * @example\n *\n *      var double = x => x * 2;\n *\n *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n *\n *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n */\nmodule.exports = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n  switch (Object.prototype.toString.call(functor)) {\n    case '[object Function]':\n      return curryN(functor.length, function() {\n        return fn.call(this, functor.apply(this, arguments));\n      });\n    case '[object Object]':\n      return _reduce(function(acc, key) {\n        acc[key] = fn(functor[key]);\n        return acc;\n      }, {}, keys(functor));\n    default:\n      return _map(fn, functor);\n  }\n}));\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns `true` if the first argument is less than the second; `false`\n * otherwise.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Relation\n * @sig Ord a => a -> a -> Boolean\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n * @see R.gt\n * @example\n *\n *      R.lt(2, 1); //=> false\n *      R.lt(2, 2); //=> false\n *      R.lt(2, 3); //=> true\n *      R.lt('a', 'z'); //=> true\n *      R.lt('z', 'a'); //=> false\n */\nmodule.exports = _curry2(function lt(a, b) { return a < b; });\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Returns the second argument if it is not `null`, `undefined` or `NaN`\n * otherwise the first argument is returned.\n *\n * @func\n * @memberOf R\n * @since v0.10.0\n * @category Logic\n * @sig a -> b -> a | b\n * @param {a} val The default value.\n * @param {b} val The value to return if it is not null or undefined\n * @return {*} The the second value or the default value\n * @example\n *\n *      var defaultTo42 = R.defaultTo(42);\n *\n *      defaultTo42(null);  //=> 42\n *      defaultTo42(undefined);  //=> 42\n *      defaultTo42('Ramda');  //=> 'Ramda'\n *      defaultTo42(parseInt('string')); //=> 42\n */\nmodule.exports = _curry2(function defaultTo(d, v) {\n  return v == null || v !== v ? d : v;\n});\n","var _curry2 = require('./internal/_curry2');\n\n\n/**\n * Retrieve the value at a given path.\n *\n * @func\n * @memberOf R\n * @since v0.2.0\n * @category Object\n * @sig [String] -> {k: v} -> v | Undefined\n * @param {Array} path The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path`.\n * @see R.prop\n * @example\n *\n *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n */\nmodule.exports = _curry2(function path(paths, obj) {\n  var val = obj;\n  var idx = 0;\n  while (idx < paths.length) {\n    if (val == null) {\n      return;\n    }\n    val = val[paths[idx]];\n    idx += 1;\n  }\n  return val;\n});\n","var _curry3 = require('./internal/_curry3');\nvar defaultTo = require('./defaultTo');\nvar path = require('./path');\n\n\n/**\n * If the given, non-null object has a value at the given path, returns the\n * value at that path. Otherwise returns the provided default value.\n *\n * @func\n * @memberOf R\n * @since v0.18.0\n * @category Object\n * @sig a -> [String] -> Object -> a\n * @param {*} d The default value.\n * @param {Array} p The path to use.\n * @param {Object} obj The object to retrieve the nested property from.\n * @return {*} The data at `path` of the supplied object or the default value.\n * @example\n *\n *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n */\nmodule.exports = _curry3(function pathOr(d, p, obj) {\n  return defaultTo(d, path(p, obj));\n});\n","/* eslint-disable new-cap */\nimport { pathOr, pipe, curry, reduce, concat, map, lt, propOr, propEq, filter } from 'ramda';\nimport { Project, Recording, Deliverable } from '../../types';\nimport Immutable from 'seamless-immutable';\n\nexport const updateAt = curry((keyArray, newVal, obj) => {\n  const deepNewVal = keyArray.reduceRight(\n    (result, key) => ({ [key]: result })\n    , newVal\n  );\n\n  return Immutable(obj).merge(deepNewVal, { deep: true });\n});\n\nexport const selectedProject = pathOr(null, ['selectedProject']);\n\n// Model -> [Project]\nconst unselectedProjects = pipe(propOr(null, 'unselectedProjects'), v => v || []);\n\nexport const allProjects = model => (\n    selectedProject(model)\n    ? unselectedProjects(model).concat(selectedProject(model))\n    : unselectedProjects(model)\n  );\n\nexport const recordingsInfo = model => {\n  const nonZeroRecordingTime = pipe(\n    propOr(null, 'recording'),\n    Recording.totalTime,\n    lt(0), // Int -> Bool. Whether zero is less than the number that will be passed\n  );\n\n  const projectRecordingInfos = project => pipe(\n    Project.getDeliverables,\n    map(d => ({ project, deliverable: d, recording: Deliverable.getRecording(d) }))\n  )(project);\n\n  const all = pipe(\n    allProjects,\n    map(projectRecordingInfos),\n    reduce(concat, [])\n  )(model);\n\n  return all.filter(nonZeroRecordingTime);\n};\n\nexport const getProject = curry((projectName, model) => pipe(\n  allProjects,\n  filter(propEq('name', projectName))\n)(model));\n\nexport const getDeliverable = curry((deliverableName, projectName, model) => pipe(\n  getProject(projectName),\n  Project.getDeliverables,\n  filter(propEq('name', deliverableName))\n)(model));\n\n\nexport const updateProject = curry((project, model, newProject) => {\n  const projectName = Project.getName(project);\n  if (!(model && projectName && newProject)) {\n    return model;\n  }\n\n  const sameProjectName = propEq('name', projectName);\n  const updatingSelectedProject = projectName === propOr(null, 'name', model.selectedProject);\n  const updatingUnselectedProject = !!unselectedProjects(model).find(sameProjectName);\n\n  if (updatingSelectedProject) {\n    return updateAt(\n      ['selectedProject'],\n      newProject,\n      model\n    );\n  } else if (updatingUnselectedProject) {\n    const newUnselectedProjects = unselectedProjects(model)\n      .map(p => (sameProjectName(p) ? newProject : p));\n\n    return updateAt(\n      ['unselectedProjects'],\n      newUnselectedProjects,\n      model\n    );\n  }\n\n  return model;\n});\n","import { allProjects, updateProject, recordingsInfo } from './utils';\nimport { Project, Recording, Deliverable, Maybe } from '../../types';\nimport { curry, find, pipe, filter, prop, head } from 'ramda';\n\n// Model -> {Project, Deliverable} -> Model\nconst toggleDeliverableRecording = curry((model, { project, deliverable }) =>\n  Maybe.of(deliverable)\n    .map(Deliverable.getRecording)\n    .map(Recording.toggleRecording)\n    .map(Deliverable.setRecording(deliverable))\n    .map(Project.updateDeliverable(project))\n    .map(updateProject(project, model))\n    .withDefault(model)\n);\n\n// Model -> Maybe\nconst findRecordingDeliverable = model =>\n  Maybe.of(model)\n    .map(recordingsInfo)\n    .map(filter(pipe(prop('recording'), Recording.isRecording)))\n    .map(head);\n\n// Model -> Model\nconst stopAllRecordings = model =>\n  Maybe.of(model)\n    .chain(findRecordingDeliverable)\n    .map(toggleDeliverableRecording(model))\n    .map(stopAllRecordings)\n    .withDefault(model);\n\n// Project -> Maybe(Project)\nconst getUpToDateProject = curry((project, model) =>\n  Maybe.of(model)\n    .map(allProjects)\n    .map(find(Project.isSame(project)))\n);\n\nexport default (model, { project, deliverable }) =>\n  Maybe.of(model)\n    .map(stopAllRecordings)\n    .chain(changedModel =>\n      getUpToDateProject(project, changedModel)\n      .map(p =>\n        toggleDeliverableRecording(\n          changedModel,\n          { project: p, deliverable }\n        ))\n    )\n    .withDefault(model);\n","export const mockDeliverable = {\n  \"name\": \"Rush with possible clients\",\n  \"url\": \"localhost:8080/deliverables/rush-cold-call\",\n  \"recording\": {\n    \"startTime\": null,\n    \"intervals\": [{\n      \"start\": \"2016-12-13T13:37:01.465Z\",\n      \"end\": \"2016-12-13T13:41:23.457Z\"\n    }]\n  }\n}\n\nexport const mockProject = {\n  \"name\": \"Rushed project\",\n  \"url\": \"localhost:8080/projects/rushed-project\",\n  \"unselectedDeliverables\": [\n    mockDeliverable, {\n    \"name\": \"Rush with online ads\",\n    \"url\": \"localhost:8080/deliverables/rush-buy-ads\",\n    \"recording\": {\n      \"startTime\": null,\n      \"intervals\": [{\n        \"start\": \"2016-12-13T13:36:58.941Z\",\n        \"end\": \"2016-12-13T13:37:01.460Z\"\n      }]\n    }\n  }, {\n    \"name\": \"Rush with logo\",\n    \"url\": \"localhost:8080/deliverables/rush-create-logo\",\n    \"recording\": null\n  }],\n  \"selectedDeliverable\": mockDeliverable\n};\n\nexport const mockUnselectedDeliverable = {\n  \"name\": \"Useless logo\",\n  \"url\": \"localhost:8080/deliverables/useless-create-logo\",\n  \"recording\": null\n};\n\nexport const mockUnselectedProject = {\n  \"name\": \"Useless project\",\n  \"url\": \"localhost:8080/projects/rushed-project\",\n  \"unselectedDeliverables\": [\n    mockUnselectedDeliverable, {\n    \"name\": \"Useless online ads\",\n    \"url\": \"localhost:8080/deliverables/useless-buy-ads\",\n    \"recording\": null\n  }, {\n    \"name\": \"Useless possible clients\",\n    \"url\": \"localhost:8080/deliverables/useless-cold-call\",\n    \"recording\": null\n  }],\n  \"selectedDeliverable\": null\n};\n\nexport const mockModel = {\n  \"minimised\": false,\n  \"serverURL\": \"./data.json\",\n  \"unselectedProjects\": [\n    mockUnselectedProject, {\n    \"name\": \"Big project\",\n    \"url\": \"localhost:8080/projects/big-project\",\n    \"unselectedDeliverables\": [{\n      \"name\": \"Cold call possible clients\",\n      \"url\": \"localhost:8080/deliverables/cold-call\",\n      \"recording\": {\n        \"startTime\": \"2016-12-13T13:37:52.078Z\", /// Is recording\n        \"intervals\": [{\n          \"start\": \"2016-12-13T13:36:52.078Z\",\n          \"end\": \"2016-12-13T13:36:55.013Z\"\n        }]\n      }\n    }, {\n      \"name\": \"Buy online ads\",\n      \"url\": \"localhost:8080/deliverables/buy-ads\",\n      \"recording\": {\n        \"startTime\": \"2016-12-13T13:39:52.078Z\", // Is recording\n        \"intervals\": [{\n          \"start\": \"2016-12-13T13:36:50.309Z\",\n          \"end\": \"2016-12-13T13:36:52.075Z\"\n        }]\n      }\n    }],\n    \"selectedDeliverable\": {\n      \"name\": \"Create logo\",\n      \"url\": \"localhost:8080/deliverables/create-logo\",\n      \"recording\": {\n        \"startTime\": null,\n        \"intervals\": [{\n          \"start\": \"2016-12-13T13:36:55.018Z\",\n          \"end\": \"2016-12-13T13:36:58.935Z\"\n        }]\n      }\n    }\n  }],\n  \"selectedProject\": mockProject,\n}\n","/* eslint-env jasmine */\nimport toggleRecording from '../../js/Widget/update/toggleRecording';\nimport { Recording, Deliverable } from '../../js/types';\nimport { pipe, prop } from 'ramda';\nimport { recordingsInfo } from '../../js/Widget/update/utils';\nimport {\n  mockDeliverable,\n  mockProject,\n  mockUnselectedDeliverable,\n  mockUnselectedProject,\n  mockModel,\n} from './mockData';\n\ndescribe('Update.toggleRecording', () => {\n  it('stops other recordings when toggling the selected project', () => {\n    const mockAction = {\n      project: mockProject,\n      deliverable: mockDeliverable,\n    };\n\n    const toggledModel = toggleRecording(mockModel, mockAction);\n\n    const deliverablesRecording = recordingsInfo(toggledModel)\n      .filter(pipe(prop('recording'), Recording.isRecording))\n      .map(prop('deliverable'));\n\n    expect(deliverablesRecording.length).toEqual(1);\n    const sameName =\n      Deliverable.getName(mockDeliverable)\n      === Deliverable.getName(deliverablesRecording[0]);\n    expect(sameName).toEqual(true);\n  });\n\n  it('stops other recordings when toggling an unselected project and deliverable', () => {\n    const mockAction = {\n      project: mockUnselectedProject,\n      deliverable: mockUnselectedDeliverable,\n    };\n\n    const toggledModel = toggleRecording(mockModel, mockAction);\n\n    const deliverablesRecording = recordingsInfo(toggledModel)\n      .filter(pipe(prop('recording'), Recording.isRecording))\n      .map(prop('deliverable'));\n\n    expect(deliverablesRecording.length).toEqual(1);\n    const sameName =\n      Deliverable.getName(mockUnselectedDeliverable)\n      === Deliverable.getName(deliverablesRecording[0]);\n    expect(sameName).toEqual(true);\n  });\n});\n","import { propEq, propOr, reject, pipe } from 'ramda';\nimport {\n  allProjects,\n  updateAt,\n} from './utils';\n\nexport default (model, action) => {\n  const { project = null } = action;\n\n  const projectName = propOr(null, 'name', project);\n  const newUnselectedProjects = pipe(\n    allProjects,\n    reject(propEq('name', projectName))\n  )(model);\n\n  return pipe(\n    updateAt(['selectedProject'], project),\n    updateAt(['unselectedProjects'], newUnselectedProjects)\n  )(model);\n};\n","/* eslint-env jasmine */\nimport selectProject from '../../js/Widget/update/selectProject';\nimport { Project } from '../../js/types';\nimport {\n  mockProject,\n  mockUnselectedProject,\n  mockModel,\n} from './mockData';\n\ndescribe('update.selectProject', () => {\n  it('selects a project successfully', () => {\n    const mockAction = {\n      project: mockUnselectedProject,\n      deliverable: mockUnselectedProject.unselectedDeliverables[0],\n    };\n    const modifiedModel = selectProject(mockModel, mockAction);\n    expect(Project.isSame(mockUnselectedProject, modifiedModel.selectedProject)).toEqual(true);\n  });\n\n  it('selects a the current project successfully', () => {\n    const mockAction = {\n      project: mockProject,\n    };\n    const modifiedModel = selectProject(mockModel, mockAction);\n    expect(Project.isSame(mockProject, modifiedModel.selectedProject)).toEqual(true);\n  });\n});\n","import { Project, Maybe } from '../../types';\nimport { updateProject } from './utils';\nimport selectProject from './selectProject';\n\nexport default (model, { project, deliverable }) =>\n  Maybe.of(project)\n    .map(p => selectProject(model, { project: p }))\n    .chain(m =>\n      Maybe.of(m.selectedProject)\n        .chain(p =>\n          Maybe.of(deliverable)\n          .map(Project.setSelectedDeliverable(p))\n          .map(updateProject(p, m))\n        )\n  )\n  .withDefault(model);\n","/* eslint-env jasmine */\nimport selectDeliverable from '../../js/Widget/update/selectDeliverable';\nimport { Project, Deliverable } from '../../js/types';\nimport {\n  mockProject,\n  mockUnselectedProject,\n  mockModel,\n} from './mockData';\n\ndescribe('update.selectDeliverable', () => {\n  it('selects a deliverable from the selected project successfully', () => {\n    const mockAction = {\n      project: mockProject,\n      deliverable: mockProject.unselectedDeliverables[0],\n    };\n    const modifiedModel = selectDeliverable(mockModel, mockAction);\n    expect(Project.isSame(mockProject, modifiedModel.selectedProject)).toEqual(true);\n    expect(Deliverable.isSame(\n      mockProject.unselectedDeliverables[0],\n      modifiedModel.selectedProject.selectedDeliverable\n    )).toEqual(true);\n  });\n\n  it('selects a deliverable from the a non selected project successfully', () => {\n    const mockAction = {\n      project: mockUnselectedProject,\n      deliverable: mockUnselectedProject.unselectedDeliverables[0],\n    };\n    const modifiedModel = selectDeliverable(mockModel, mockAction);\n    expect(Project.isSame(mockUnselectedProject, modifiedModel.selectedProject)).toEqual(true);\n    expect(Deliverable.isSame(\n      mockUnselectedProject.unselectedDeliverables[0],\n      modifiedModel.selectedProject.selectedDeliverable\n    )).toEqual(true);\n  });\n});\n"],"names":["_isPlaceholder","require$$0","_curry1","_arity","require$$1","_curry2","_curryN","require$$3","require$$2","curryN","curry","types","Math","random","Maybe","value","type","isJust","undefined","Just","isNothing","withDefault","defaultVal","map","f","of","Nothing","chain","v","_","_default","map2","v1","v2","mapIf","condition","RemoteData","isSuccess","Success","isFailure","Failure","isLoading","Loading","log","isNotAsked","NotAsked","elseVal","mapSuccess","mapLoading","mapFailure","toMaybe","_value","Validation","throwFailure","assert","andThen","val","_pipe","_curry3","_xwrap","bind","_isArray","_isString","isArrayLike","_reduce","_slice","_checkForMethod","slice","pipe","errMsg","prop","errorMessage","string","bool","array","subType","Array","isArray","subTypesValidation","reduce","date","Date","nullable","maybe","_default2","haveSameKeys","o1","o2","k1","Object","keys","k2","out","key","includes","object","typeSignature","_default3","outcome","_has","propOr","global","immutableConstructor","typeChecker","customCheck","Immutable","typeCheck","TimeInterval","getStart","model","start","getEnd","end","getValue","maybeStart","valueOf","maybeEnd","s","e","assign","isRecording","setStartTime","newInterval","getStartTime","withStartTime","setIntervals","getIntervals","calculateRunningTime","startTime","intervals","intervalsSum","sumSinceStartTime","d","Recording","r","imutableModel","merge","deep","_default4","toggleRecording","_toggleRecording","totalTime","_totalTime","Deliverable","getRecording","deliverable","recording","getName","getUrl","setRecording","newRecording","isSame","d1","d2","_arrayFromIterator","_functionName","identical","_isArguments","require$$5","require$$4","_equals","equals","_isTransformer","_dispatchable","_filter","_isObject","_xfilter","require$$6","Project","getSelectedDeliverable","getDeliverables","setSelectedDeliverable","newSelected","newDeliverables","updateDeliverable","newDeliverable","sameName","deliv","_default6","name","unselectedDeliverables","find","newUnselected","p1","p2","_Maybe","_RemoteData","_Validation","_Recording","_TimeInterval","_Deliverable","_Project","describe","successVal","successVal2","failureVal","aSuccess","aSuccess2","aFailure","a","toBe","toEqual","toThrow","not","success1","success2","delivName","delivUrl","delivRec","validObject","url","validDeliv","validObjectNoRec","validDelivNoRec","invalid1","invalid2","invalid3","setAndGetRecording","now","secInterval5","secInterval10","valid1","valid1Running","valid2","valid2Running","invalid1Running","validates","intervalIsArray","empty","setAndGetIntervals","toggledValue","toggledStartTime","toBeLessThanOrEqual","sec15","sec15Running","sec0","sec0Running","toBeGreaterThan","createdJustWithOf","createdJust","createdNothing","justVal","mappedVal","func","mapAndGetDefault","map2AndGetDefault","validObj","invalid4","invalid5","mockDeliverable","validName","validUrl","valid","isValid","asMutable","m","toBeTruthy","mockDeliverableChanged","mockProject","updateAndGetDeliverables","toBeFalsy","_reduced","_xfBase","_xfind","nth","_isFunction","_indexOf","_contains","_map","_quote","_toISOString","_complement","filter","reject","_toString","toString","_xmap","defaultTo","path","pathOr","updateAt","keyArray","newVal","obj","deepNewVal","reduceRight","result","selectedProject","unselectedProjects","allProjects","concat","recordingsInfo","nonZeroRecordingTime","_default5","projectRecordingInfos","project","all","_default7","getProject","projectName","_default9","_default10","getDeliverable","deliverableName","updateProject","newProject","sameProjectName","updatingSelectedProject","updatingUnselectedProject","newUnselectedProjects","p","toggleDeliverableRecording","findRecordingDeliverable","stopAllRecordings","getUpToDateProject","changedModel","mockUnselectedDeliverable","mockUnselectedProject","mockModel","mockAction","toggledModel","deliverablesRecording","length","action","modifiedModel","selectProject","selectDeliverable","selectedDeliverable"],"mappings":"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","preExisting":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}